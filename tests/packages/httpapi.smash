*** Before Everything {
    // run a mock express test server
    const express = i('express');
    const http = i('http');
    const bodyParser = i('body-parser');
    const cookieParser = i('cookie-parser');

    let app = express();
    app.use(bodyParser.json());
    app.use(cookieParser());

    app.get('/one', (req, res) => {
        res.status(200).send('get response');
    });

    app.post('/one', (req, res) => {
        if(req.body.one === 'two') {
            res.status(201).send('post response');
        }
        else {
            res.status(404).send('bad input');
        }
    });

    app.put('/one', (req, res) => {
        if(req.body.one === 'two') {
            res.status(202).send('put response');
        }
        else {
            res.status(404).send('bad input');
        }
    });

    app.patch('/one', (req, res) => {
        if(req.body.one === 'two') {
            res.status(203).send('patch response');
        }
        else {
            res.status(404).send('bad input');
        }
    });

    app.delete('/one', (req, res) => {
        if(req.body.one === 'two') {
            res.status(203).send('delete response');
        }
        else {
            res.status(404).send('bad input');
        }
    });

    app.head('/one', (req, res) => {
        res.status(200).send('head response');
    });

    app.options('/one', (req, res) => {
        res.status(200).send('options response');
    });

    app.get('/cookie-check', (req, res) => {
        if(req.cookies.key1 === 'value1' && req.cookies.key2 === 'value2') {
            res.status(200).send('good cookies');
        }
        else {
            res.status(404).send('bad cookies');
        }
    });

    app.get('/send-json', (req, res) => {
        res.status(200).json({one:"two"});
    });

    await new Promise(res => {
        let httpServer = http.createServer(app).listen(8500, () => res());
    });
}

- httpapi tests

    - Request

        - GET

            make a request [
                using get() {
                    await get('http://localhost:8500/one');
                }

                using request() {
                    await request('http://localhost:8500/one');
                }

                using request() with object {
                    await request({
                        method: 'GET',
                        url: 'http://localhost:8500/one',
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 200,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "get response",
                        rawBody: "get response",
                        responseObj: {}
                    });
                }

        - POST

            make a request [
                using post() {
                    await post({
                        url: 'http://localhost:8500/one',
                        headers: {
                            'content-type': 'application/json'
                        },
                        body: `{"one":"two"}`,
                        timeout: 1500
                    });
                }

                using request() {
                    await request({
                        method: 'POST',
                        url: 'http://localhost:8500/one',
                        body: {one:"two"},
                        json: true,
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 201,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "post response",
                        rawBody: "post response",
                        responseObj: {}
                    });
                }

        - PUT

            make a request [
                using put() {
                    await put({
                        url: 'http://localhost:8500/one',
                        headers: {
                            'content-type': 'application/json'
                        },
                        body: `{"one":"two"}`,
                        timeout: 1500
                    });
                }

                using request() {
                    await request({
                        method: 'PUT',
                        url: 'http://localhost:8500/one',
                        body: {one:"two"},
                        json: true,
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 202,
                        error: null,
                        body: 'put response',
                        rawBody: 'put response',
                        responseObj: {}
                    });
                }

        - PATCH

            make a request [
                using patch() {
                    await patch({
                        url: 'http://localhost:8500/one',
                        headers: {
                            'content-type': 'application/json'
                        },
                        body: `{"one":"two"}`,
                        timeout: 1500
                    });
                }

                using request() {
                    await request({
                        method: 'patch',
                        url: 'http://localhost:8500/one',
                        body: {one:"two"},
                        json: true,
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 203,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "patch response",
                        rawBody: "patch response",
                        responseObj: {}
                    });
                }

        - DELETE

            make a request [
                using del() {
                    await del({
                        url: 'http://localhost:8500/one',
                        headers: {
                            'content-type': 'application/json'
                        },
                        body: `{"one":"two"}`,
                        timeout: 1500
                    });
                }

                using request() {
                    await request({
                        method: 'delete',
                        url: 'http://localhost:8500/one',
                        body: {one:"two"},
                        json: true,
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 203,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "delete response",
                        rawBody: "delete response",
                        responseObj: {}
                    });
                }

        - HEAD

            make a request [
                using head() {
                    await head('http://localhost:8500/one');
                }

                using request() {
                    await request({
                        method: 'HEAD',
                        url: 'http://localhost:8500/one',
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 200,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "",
                        rawBody: "",
                        responseObj: {}
                    });
                }

        - OPTIONS

            make a request [
                using options() {
                    await options('http://localhost:8500/one');
                }

                using request() {
                    await request({
                        method: 'options',
                        url: 'http://localhost:8500/one',
                        timeout: 1500
                    });
                }
            ]

                verify response {
                    response.verify({
                        statusCode: 200,
                        headers: {
                            "content-type": "text/html; charset=utf-8"
                        },
                        error: null,
                        body: "options response",
                        rawBody: "options response",
                        responseObj: {}
                    });
                }

        - defaults()

            set defaults {
                api.defaults({proxy: 'http://localproxy.com'});
            }

                - Verify no errors occur

        - cookies

            create cookies {
                let jar = api.jar();
                let cookie1 = api.cookie('key1=value1');
                let cookie2 = api.cookie('key2=value2');
                let url = 'http://localhost:8500';
                jar.setCookie(cookie1, url);
                jar.setCookie(cookie2, url);

                return jar;
            }

                send a request that necessitates the cookies {
                    let jar = prev;
                    await get({url: 'http://localhost:8500/cookie-check', jar: jar});
                }

                    verify response {
                        response.verify({
                            statusCode: 200,
                            body: "good cookies"
                        });
                    }

    - Response

        - response.verify()

            - Verifies JSON bodies

                make a request {
                    await get('http://localhost:8500/send-json');
                }

                    verify the response {
                        response.verify({
                            statusCode: 200,
                            headers: {
                                "content-type": "application/json; charset=utf-8"
                            },
                            error: null,
                            body: {
                                one: 'two'
                            },
                            rawBody: '{"one":"two"}',
                            responseObj: {}
                        });
                    }

                        - Verify correct logging in report #manual -s

            - Verifies error responses

                make a bad request {
                    await get('http://localhost:8500/badendpoint');
                }

                    verify the response {
                        response.verify({
                            statusCode: 404,
                            headers: {
                                "content-type": "text/html; charset=utf-8"
                            },
                            error: null,
                            body: { $typeof: 'string' },
                            rawBody: { $typeof: 'string' },
                            responseObj: {}
                        });
                    }

                        - Verify that -->'s are marked red in the report #manual -s
