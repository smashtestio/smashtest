open browser

    open test page + [

        inits {
            await i('ElementFinder', '../../dist/packages/js/elementfinder.js');
            await i('Comparer', '../../dist/packages/js/comparer.js');
            chai.use(i('chai-as-promised'));

            g('setPageBody', async (htmlStr) => {
                await browser.executeScript(function(htmlStr) {
                    document.body.innerHTML = htmlStr;
                }, htmlStr);
            });

            g('regularize', (str) => {
                return str.replace(/\n\s*\|/g, '\n').replace(/^\s*\n/, '');
            });

            l(`test page location`, `file:///${dir()}/generic-page.html`);
        }

            navigate to {{test page location}}
    ]

        - getAll() tests
            - normal EFs

                - one line

                    - text

                        - matches innerText

                            create html page {
                                await setPageBody(`
                                    <div id="one">foobar</div>
                                    <div id="two">
                                        <div id="three">
                                            foo bar
                                        </div>
                                    </div>
                                    <div id="four">
                                        buzz
                                    </div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foo'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foo'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(5);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                    expect((await results.matches[1].getTagName()).toLowerCase()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('three');
                                }

                        - matches innerText, where the matching text is of a different case and has differing whitespace

                            create html page {
                                await setPageBody(`
                                    <div id="one"> BARFOO  BARFOO </div>
                                    <div id="two">
                                        <div id="three">
                                            FoO   Bar
                                        </div>
                                    </div>
                                    <div id="four">
                                        buzz
                                    </div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`' foo  bar '`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x ' foo  bar '`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(5);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                    expect((await results.matches[1].getTagName()).toLowerCase()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('three');
                                }

                        - matches value

                            - matches by attribute value

                                create html page {
                                    await setPageBody(`
                                        <input id="one" type="text" value="foobar">
                                        <div id="wrong">buzz</div>
                                    `);
                                }

                                    finds element {
                                        let ef = new ElementFinder(`'foobar'`);
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                            - matches by js-set value

                                create html page {
                                    await setPageBody(`
                                        <input id="one" type="text">
                                        <div id="wrong">buzz</div>
                                    `);

                                    await browser.executeScript(function() {
                                        document.getElementById("one").value = "foobar";
                                    });
                                }

                                    finds element {
                                        let ef = new ElementFinder(`'foobar'`);
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                        - matches placeholder

                            create html page {
                                await setPageBody(`
                                    <input id="one" type="text" placeholder="foobar">
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds element {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                        - matches an associated label's innerText

                            create html page {
                                await setPageBody(`
                                    <div id="one">Something</div>
                                    <label for="wrong">buzz label</label>
                                    <label for="one">foobar2</label>
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(4);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                    expect((await results.matches[1].getTagName()).toLowerCase()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[3].getAttribute('for')).to.equal('one');
                                }

                        - matches text that spans multiple elements

                            create html page {
                                await setPageBody(`
                                    <div id="one">
                                        <div id="two">
                                            foo
                                        </div>
                                        <div id="three">
                                            bar
                                        </div>
                                    </div>
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                finds one element {
                                    let ef = new ElementFinder(`'foo bar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                }

                                finds all elements {
                                    let ef = new ElementFinder(`1+ x 'foo bar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                    expect((await results.matches[1].getTagName()).toLowerCase()).to.equal('body');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                }

                        - doesn't find elements

                            create html page {
                                await setPageBody(`
                                    <div id="wrong">buzz</div>
                                `);
                            }

                                doesn't find elements {
                                    let ef = new ElementFinder(`'foobar'`);
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`'foobar'  -->  not found (zero matches after \`'foobar'\` applied)`);
                                }

                    - defined prop

                        * create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            * finds one element {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            * finds all elements {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                            }

                            * doesn't find elements {
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`tiny  -->  not found (zero matches after \`tiny\` applied)`);
                            }

                        create html page

                            - prop is an EF

                                - one EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.tiny = [ new ElementFinder(`selector '.tiny'`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find one element {
                                            g('ef', new ElementFinder(`big`, definedProps));
                                        }

                                            finds one element

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x big`, definedProps));
                                        }

                                            finds all elements

                                        try to not find any elements {
                                            g('ef', new ElementFinder(`tiny`, definedProps));
                                        }

                                            doesn't find elements

                                - EF referenced by an EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.bigger = [ new ElementFinder(`big`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x bigger`, definedProps));
                                        }

                                            finds all elements

                                - EF referenced by an EF referenced by an EF

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [ new ElementFinder(`selector '.big'`, definedProps) ];
                                        definedProps.bigger = [ new ElementFinder(`big`, definedProps) ];
                                        definedProps.biggest = [ new ElementFinder(`bigger`, definedProps) ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x biggest`, definedProps));
                                        }

                                            finds all elements

                            - prop is a function

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps.big = [ function(elems, input) {
                                        return elems.filter(function(elem) {
                                            return elem.className === 'big';
                                        });
                                    } ]

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`big`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x big`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`tiny`, definedProps));
                                    }

                                        doesn't find elements

                            - prop is a function with input

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps['look for it'] = [ function(elems, input) {
                                        return elems.filter(function(elem) {
                                            return elem.className == input;
                                        });
                                    } ]

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`look for it 'big'`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x look for it 'big'`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`look for it 'tiny'`, definedProps));
                                    }

                                        doesn't find elements {
                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(`look for it 'tiny'  -->  not found (zero matches after \`look for it 'tiny'\` applied)`);
                                        }

                            - multiple definitions in one prop

                                create defined props {
                                    let definedProps = ElementFinder.defaultProps();
                                    definedProps.big = [
                                        new ElementFinder(`#three`, definedProps),
                                        new ElementFinder(`#three`, definedProps),
                                        function(elems, input) {
                                            return elems.filter(function(elem) {
                                                return elem.id === 'two';
                                            });
                                        }
                                    ];
                                    definedProps.tiny = [
                                        new ElementFinder(`#tiny`, definedProps),
                                        function(elems, input) {
                                            return elems.filter(function(elem) {
                                                return elem.id === 'tiny';
                                            });
                                        }
                                    ];

                                    g('definedProps', definedProps);
                                }

                                    try to find one element {
                                        g('ef', new ElementFinder(`big`, definedProps));
                                    }

                                        finds one element

                                    try to find all elements {
                                        g('ef', new ElementFinder(`1+ x big`, definedProps));
                                    }

                                        finds all elements

                                    try to not find any elements {
                                        g('ef', new ElementFinder(`tiny`, definedProps));
                                    }

                                        doesn't find elements

                            - handles the 'not' keyword

                                - prop has one definition

                                - prop has multiple definitions

                                    create defined props {
                                        let definedProps = ElementFinder.defaultProps();
                                        definedProps.big = [
                                            new ElementFinder(`#three`, definedProps),
                                            new ElementFinder(`#three`, definedProps),
                                            function(elems, input) {
                                                return elems.filter(function(elem) {
                                                    return elem.id === 'two';
                                                });
                                            }
                                        ];
                                        definedProps.all = [ // matches everything
                                            new ElementFinder(`selector '*'`, definedProps),
                                            function(elems, input) {
                                                return elems;
                                            }
                                        ];

                                        g('definedProps', definedProps);
                                    }

                                        try to find one element {
                                            g('ef', new ElementFinder(`not big`, definedProps));
                                        }

                                            finds one element {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.false;
                                                expect(results.matches).to.have.lengthOf(1);
                                                expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                            }

                                        try to find all elements {
                                            g('ef', new ElementFinder(`1+ x not big`, definedProps));
                                        }

                                            finds all elements {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.false;
                                                expect(results.matches).to.have.lengthOf(4);
                                                expect((await results.matches[0].getTagName()).toLowerCase()).to.equal('html');
                                                expect((await results.matches[1].getTagName()).toLowerCase()).to.equal('body');
                                                expect(await results.matches[2].getAttribute('id')).to.equal('one');
                                                expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                            }

                                        try to not find any elements {
                                            g('ef', new ElementFinder(`not all`, definedProps));
                                        }

                                            doesn't find elements {
                                                let results = await ef.getAll(browser.driver);
                                                results.ef = ElementFinder.parseObj(results.ef);

                                                expect(results.ef.hasErrors()).to.be.true;
                                                expect(results.matches).to.have.lengthOf(0);
                                                expect(results.ef.print()).to.equal(`not all  -->  not found (zero matches after \`not all\` applied)`);
                                            }

                    - selector

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            finds one element {
                                let ef = new ElementFinder(`div.big`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            finds all elements {
                                let ef = new ElementFinder(`1+ x div.big`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`div.tiny`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`div.tiny  -->  not found (zero matches after \`div.tiny\` applied)`);
                            }

                    - ord

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            finds one element {
                                let ef = new ElementFinder(`div, 3rd`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`div, 5th`);
                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`div, 5th  -->  not found (zero matches after \`5th\` applied)`);
                            }

                    - counter

                        - counter with a min only

                            min == 0 {
                                g('ef', new ElementFinder(`0- x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                multiple matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            min > 0 {
                                g('ef', new ElementFinder(`2- x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2- x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2- x .big  -->  only found 1`);
                                    }

                                min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                > min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                        - counter with a min and max

                            min and max == 0 {
                                g('ef', new ElementFinder(`0 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                multiple matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                            min == 0, max > 0 {
                                g('ef', new ElementFinder(`0-2 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, no errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(0);
                                    }

                                < max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    }

                                max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            min < max {
                                g('ef', new ElementFinder(`2-4 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2-4 x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`2-4 x .big  -->  only found 1`);
                                    }

                                min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                                min-max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="small">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                        <div id="five" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                    }

                            min == max {
                                g('ef', new ElementFinder(`3 x .big`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`3 x .big  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements, has errors {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`3 x .big  -->  only found 2`);
                                    }

                                min-max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                > max matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="big">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                    }

                    - match me

                        normal {
                            g('ef', new ElementFinder(`[.big]`));
                        }

                            0 matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="small">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                doesn't find elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`[.big]  -->  not found (zero matches after \`.big\` applied)`);
                                }

                            1 matching element exists {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                }

                            multiple matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="big">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                }

                        - counter x match me

                            counter inside match me {
                                g('ef', new ElementFinder(`[2 x .big]`));
                            }

                                0 matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="small">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`[2 x .big]  -->  not found (zero matches after \`.big\` applied)`);
                                    }

                                < min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="small">foobar</div>
                                        <div id="four" class="small">foobar</div>
                                    `);
                                }

                                    doesn't find elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`[2 x .big]  -->  only found 1`);
                                    }

                                > min matching elements exist {
                                    await setPageBody(`
                                        <div id="one" class="small">foobar</div>
                                        <div id="two" class="big">foobar</div>
                                        <div id="three" class="big">foobar</div>
                                        <div id="four" class="big">foobar</div>
                                    `);
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    }

                            counter outside match me {
                                g('ef', new ElementFinder(`2 x [.big]`));
                            }

                                doesn't find elements, since it's a bad selector {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(`2 x [.big]  -->  not found (zero matches after \`[.big]\` applied)`);
                                }

                        match me element array {
                            g('ef', new ElementFinder(`* [.big]`));
                        }

                            0 matching elements exist {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="small">foobar</div>
                                    <div id="three" class="small">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                doesn't find elements, no errors {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(0);
                                }

                            multiple matching elements exist, but are not matched by the element array {
                                await setPageBody(`
                                    <div id="one" class="small">foobar</div>
                                    <div id="two" class="big">foobar</div>
                                    <div id="three" class="big">foobar</div>
                                    <div id="four" class="small">foobar</div>
                                `);
                            }

                                errors occur {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* [.big]
                                        |
                                        |    --> missing
                                        |    div#two.big
                                        |
                                        |    --> missing
                                        |    div#three.big
                                        |`));
                                }

                    - multiple props

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);
                        }

                            - 0 matching elements exist

                                0 matching elements after the first prop {
                                    g('ef', new ElementFinder(`.bad1, 'foobar', .bad2`));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`.bad1, 'foobar', .bad2  -->  not found (zero matches after \`.bad1\` applied)`);
                                    }

                                0 matching elements after the second prop {
                                    g('ef', new ElementFinder(`'foobar', .bad1, .bad2`));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`'foobar', .bad1, .bad2  -->  not found (zero matches after \`.bad1\` applied)`);
                                    }

                            matching elements exist {
                                g('ef', new ElementFinder(`.big, 'foobar', not .bad2, position '2'`));
                            }

                                finds elements {
                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('three');
                                }

                    - special format

                        create html page {
                            await setPageBody(`
                                <div id="one" class="small">foobar</div>
                                <div id="two" class="big">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="small">foobar</div>
                            `);

                            let definedProps = ElementFinder.defaultProps();
                            definedProps.big = [ new ElementFinder(`.big`, definedProps) ];
                            definedProps.bad1 = [ new ElementFinder(`.bad1`, definedProps) ];
                            definedProps.bad2 = [ new ElementFinder(`.bad2`, definedProps) ];
                            g('definedProps', definedProps);
                        }

                            - 0 matching elements exist

                                0 matching elements after the first prop {
                                    g('ef', new ElementFinder(`bad1 'foobar' bad2`, definedProps));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`bad1 'foobar' bad2  -->  not found (zero matches after \`bad1\` applied)`);
                                    }

                                0 matching elements after the second prop {
                                    g('ef', new ElementFinder(`'foobar' bad1 bad2`, definedProps));
                                }

                                    doesn't find elements, has error {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(`'foobar' bad1 bad2  -->  not found (zero matches after \`bad1\` applied)`);
                                    }

                            - matching elements exist

                                variant 1 {
                                    g('ef', new ElementFinder(`2nd big 'foobar'`, definedProps));
                                }
                                variant 2 {
                                    g('ef', new ElementFinder(`2nd 'foobar' big`, definedProps));
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('three');
                                    }

                                variant 3 {
                                    g('ef', new ElementFinder(`'foobar' big`, definedProps));
                                }

                                    finds elements {
                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    }

                    - visible prop

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big" style="visibility: hidden">foobar</div>
                                <div id="two" class="big" style="display: none">foobar</div>
                                <div id="three" class="big">foobar</div>
                                <div id="four" class="big" style="opacity: 0">foobar</div>
                                <div id="five" class="big"></div>
                            `);
                        }

                            only finds visible elements by default {
                                let ef = new ElementFinder(`.big`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            only finds visible elements when 'visible' prop used {
                                let ef = new ElementFinder(`.big, visible`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                            }

                            only finds non-visible elements when 'not visible' used {
                                let ef = new ElementFinder(`0+ x .big, not visible`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(4);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                expect(await results.matches[3].getAttribute('id')).to.equal('five');
                            }

                            finds all elements regardless of visibility if 'any visibility' is explicitly listed {
                                let ef = new ElementFinder(`0+ x .big, any visibility`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(5);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('three');
                                expect(await results.matches[3].getAttribute('id')).to.equal('four');
                                expect(await results.matches[4].getAttribute('id')).to.equal('five');
                            }

                    - errors

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">foobar</div>
                                <div id="two" class="small">foobar</div>
                                <div id="three" class="small">foobar</div>
                                <div id="four" class="big">foobar</div>
                            `);
                        }

                            includes an error if an element isn't found, and lists the prop after which 0 elements are matched {
                                let ef = new ElementFinder(`.foobar`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`.foobar  -->  not found (zero matches after \`.foobar\` applied)`);
                            }

                            includes an error if an element isn't found, where there are multiple props that bring the matches down to 0 {
                                let ef = new ElementFinder(`.big, .foobar`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`.big, .foobar  -->  not found (zero matches after \`.foobar\` applied)`);
                            }

                            includes an error if the number of elements found are less than the counter min {
                                let ef = new ElementFinder(`3 x .big`);

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(`3 x .big  -->  only found 2`);
                            }

                            throws an error if an undefined prop is used {
                                assert.throws(() => {
                                    new ElementFinder(`div`, {});
                                }, `Cannot find property that matches \`selector\` [line:1]`);
                            }

                - one child

                    create html page {
                        await setPageBody(`
                            <div id="one" class="big">
                                <div id="two">foobar</div>
                                <div id="three">blah</div>
                                <div id="four">  FOOBAR </div>
                                <div id="five"></div>
                                <input id="eleven" type="checkbox" checked>
                            </div>
                            <div id="six" class="big">
                                <div id="seven">blah</div>
                                <div id="eight">foobar</div>
                                <input id="twelve" type="checkbox">
                            </div>
                            <div id="nine" class="small">
                                <div id="ten">foobar</div>
                                <input id="thirteen" type="checkbox" checked>
                            </div>
                            <input id="fourteen" type="checkbox" checked>
                        `);
                    }

                        - text on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    'foobar'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    'foobar'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    'nope'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    'nope'`));
                            }

                        - defined prop on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    checked
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x selector '.big, .small'
                                    |    checked
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('nine');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    selected
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    selected`));
                            }

                        - selector on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    #eight
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('six');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    selector '#three, #eight'
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    .blah
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    .blah`));
                            }

                        - ord on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    3rd
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    3rd
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    10th
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    10th`));
                            }

                        - counter on child

                            - counter of 0

                                counter of 0 on a child makes child irrelevant {
                                    let ef = new ElementFinder(regularize(`
                                        |0+ x selector'.big,.small'
                                        |    0 x div
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('nine');
                                }

                                counter of 0+ on a child makes child irrelevant {
                                    let ef = new ElementFinder(regularize(`
                                        |0+ x selector'.big,.small'
                                        |    0+ x div
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('nine');
                                }

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    2 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |0+ x .big
                                    |    2 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    5 x div
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    5 x div`));
                            }

                        - match me on child

                            finds one element {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    ['foobar']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                            }

                            finds multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |1+ x .big
                                    |    [1+ x 'foobar']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(3);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('four');
                                expect(await results.matches[2].getAttribute('id')).to.equal('eight');
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    ['nothing']
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children (in the right order)
                                    |    ['nothing']`));
                            }

                - one level of children

                    - generic tests

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="two" class="sub1">foobar</div>
                                    <div id="three" class="sub2">foobar</div>
                                </div>
                                <div id="five" class="big">
                                    <div id="six" class="sub1">foobar</div>
                                    <div id="seven" class="sub2">foobar</div>
                                    <div id="eight" class="sub3">foobar</div>
                                </div>
                            `);
                        }

                            - parent matches once

                                - finds elements

                                    children always match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub2
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                    children sometimes match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                - doesn't find elements

                                    children never match {
                                        let ef = new ElementFinder(regularize(`
                                            |#five
                                            |    .sub1
                                            |    .sub4
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |#five  -->  found, but doesn't contain the right children (in the right order)
                                            |    .sub1
                                            |    .sub4  -->  not found (zero matches after \`.sub4\` applied)`));
                                    }

                            - parent matches multiple times

                                - finds elements

                                    children always match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub2
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('five');
                                    }

                                    children sometimes match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                    }

                                - doesn't find elements

                                    children never match {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub4
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |1+ x .big  -->  2 found, but none contain the right children (in the right order)
                                            |    .sub1
                                            |    .sub4`));
                                    }

                                    children are correct but in the wrong order {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub2
                                            |    .sub1
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |1+ x .big  -->  2 found, but none contain the right children (in the right order)
                                            |    .sub2
                                            |    .sub1`));
                                    }

                    - counter

                        - counter on parent

                            create html page {
                                await setPageBody(`
                                    <div id="1" class="big">
                                        <div id="1-1" class="sub1">foobar</div>
                                    </div>
                                    <div id="2" class="big">
                                        <div id="2-1" class="sub1">foobar</div>
                                        <div id="2-2" class="sub2">foobar</div>
                                    </div>
                                    <div id="3" class="big">
                                        <div id="3-1" class="sub1">foobar</div>
                                        <div id="3-2" class="sub2">foobar</div>
                                        <div id="3-3" class="sub3">foobar</div>
                                    </div>
                                    <div id="4" class="big">
                                        <div id="4-1" class="sub1">foobar</div>
                                        <div id="4-2" class="sub2">foobar</div>
                                        <div id="4-3" class="sub3">foobar</div>
                                        <div id="4-4" class="sub4">foobar</div>
                                    </div>
                                    <div id="5" class="big">
                                        <div id="5-1" class="sub1">foobar</div>
                                        <div id="5-2" class="sub2">foobar</div>
                                        <div id="5-3" class="sub3">foobar</div>
                                        <div id="5-4" class="sub4">foobar</div>
                                        <div id="5-5" class="sub5">foobar</div>
                                    </div>
                                `);
                            }

                                - finds elements

                                    counters allow correct matching {
                                        let ef = new ElementFinder(regularize(`
                                            |3 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    - counter of 0 is used

                                        matching elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |0 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.false;
                                            expect(results.matches).to.have.lengthOf(0);
                                        }

                                        matching elements don't exist {
                                            let ef = new ElementFinder(regularize(`
                                                |0 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub7
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.false;
                                            expect(results.matches).to.have.lengthOf(0);
                                        }

                                    counter of 0+ is used {
                                        let ef = new ElementFinder(regularize(`
                                            |0+ x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    counter of 1+ is used {
                                        let ef = new ElementFinder(regularize(`
                                            |1+ x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    number of elements are between the counter's min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |1-2 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                    }

                                    there are more elements than a counter's min, and no max exists {
                                        let ef = new ElementFinder(regularize(`
                                            |2- x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('5');
                                    }

                                    there are more elements than a counter's max {
                                        let ef = new ElementFinder(regularize(`
                                            |0-2 x .big
                                            |    .sub1
                                            |    .sub2
                                            |    .sub3
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(2);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('4');
                                    }

                                - doesn't find elements

                                    - there are fewer elements than a counter's min

                                        there are > 0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |3-4 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub4
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |3-4 x .big  -->  only found 2
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub4`));
                                        }

                                        there are 0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |1-2 x .big
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub5
                                                |    .sub4
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |1-2 x .big  -->  5 found, but none contain the right children (in the right order)
                                                |    .sub1
                                                |    .sub2
                                                |    .sub3
                                                |    .sub5
                                                |    .sub4`));
                                        }

                        - counter on child

                            create html page {
                                await setPageBody(`
                                    <div id="one" class="big">
                                        <div id="1" class="small">foobar</div>
                                        <div id="2" class="med">foobar</div>
                                        <div id="3" class="small">foobar</div>
                                        <div id="4" class="small">foobar</div>
                                        <div id="5" class="small">foobar</div>
                                    </div>
                                `);
                            }

                                - finds elements

                                    counter of '1+' {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    1+ x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    number of elements are between the counter's min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    2-4 x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    there are more elements than a counter's min, and no max exists {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    2- x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    there are more elements than a counter's max {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    1-2 x .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                - doesn't find elements

                                    - fewer elements than a counter's min

                                        0 elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |.big
                                                |    .med
                                                |    4 x .bad
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |.big  -->  found, but doesn't contain the right children (in the right order)
                                                |    .med
                                                |    4 x .bad  -->  not found (zero matches after \`.bad\` applied)`));
                                        }

                                        elements exist {
                                            let ef = new ElementFinder(regularize(`
                                                |.big
                                                |    .med
                                                |    4 x .small
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |.big  -->  found, but doesn't contain the right children (in the right order)
                                                |    .med
                                                |    4 x .small  -->  only found 3`));
                                        }

                        - counter on parent and child

                            create html page {
                                await setPageBody(`
                                    <div id="one" class="big">
                                        <div id="1" class="small">foobar</div>
                                        <div id="2" class="small">foobar</div>
                                        <div id="3" class="small">foobar</div>
                                    </div>
                                    <div id="two" class="big">
                                        <div id="4" class="small">foobar</div>
                                        <div id="5" class="small">foobar</div>
                                    </div>
                                `);
                            }

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2-5 x .big
                                        |    2+ x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |3 x .big
                                        |    4 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |3 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    4 x .small`));
                                }

                    - 'any order' keyword

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                    <div id="d4" class="small">foobar</div>
                                    <div id="d5" class="small">foobar</div>
                                </div>
                                <div id="two" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                </div>
                            `);
                        }

                            finds elements in a differing order with the 'any order' keyword {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    any order
                                    |    #d3
                                    |    #d2
                                    |    #d5
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(1);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                            }

                            parent matches once, children don't match, even with the 'any order' keyword {
                                let ef = new ElementFinder(regularize(`
                                    |.big, 2nd
                                    |    any order
                                    |    #d2
                                    |    #d4
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big, 2nd  -->  found, but doesn't contain the right children
                                    |    any order
                                    |    #d2
                                    |    #d4  -->  not found (zero matches after \`#d4\` applied)`));
                            }

                            parent matches multiple times, children don't match, even with the 'any order' keyword {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    any order
                                    |    #d2
                                    |    #d6
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |.big  -->  2 found, but none contain the right children
                                    |    any order
                                    |    #d2
                                    |    #d6`));
                            }

                            - counters and 'any order'

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    #d3
                                        |    3 x div
                                        |    #d5
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                doesn't find elements because of the counter {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    #d3
                                        |    4 x div
                                        |    #d5
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children
                                        |    any order
                                        |    #d3
                                        |    4 x div
                                        |    #d5`));
                                }

                    - match me

                        create html page {
                            await setPageBody(`
                                <div id="one" class="big">
                                    <div id="d1" class="small">foobar</div>
                                    <div id="d2" class="med">foobar</div>
                                    <div id="d3" class="small">foobar</div>
                                    <div id="d4" class="small">foobar</div>
                                    <div id="d5" class="small">foobar</div>
                                </div>
                                <div id="two" class="big">
                                    <div id="d6" class="small">foobar</div>
                                    <div id="d7" class="med">foobar</div>
                                    <div id="d8" class="small">foobar</div>
                                </div>
                            `);
                        }

                            - [match me] on the parent

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    .small
                                        |    .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .none]
                                        |    .small
                                        |    .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |[2 x .none]  -->  not found (zero matches after \`.none\` applied)
                                        |    .small
                                        |    .med`));
                                }

                            - [match me] on a child

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    .small
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(2);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    .small
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |2 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    .small
                                        |    [.none]`));
                                }

                            - [match me] on multiple children

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    [.small]
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(4);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('d1');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('d6');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |2 x .big
                                        |    [.small]
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |2 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    [.small]
                                        |    [.none]`));
                                }

                            - [match me] on the parent and multiple children

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    [.small]
                                        |    [.med]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(6);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('d1');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('d6');
                                    expect(await results.matches[4].getAttribute('id')).to.equal('d2');
                                    expect(await results.matches[5].getAttribute('id')).to.equal('d7');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |[2 x .big]
                                        |    [.small]
                                        |    [.none]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |[2 x .big]  -->  2 found, but none contain the right children (in the right order)
                                        |    [.small]
                                        |    [.none]`));
                                }

                            - [counter x child element]

                                - finds elements

                                    counter with just a min {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |    [3 x .small]
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('d3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('d4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('d5');
                                    }

                                    counter with a min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |0+ x .big
                                            |    .med
                                            |    [1-3 x .small]
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(4);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('d3');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('d4');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('d5');
                                        expect(await results.matches[3].getAttribute('id')).to.equal('d8');
                                    }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    .med
                                        |    [4 x .small]
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children (in the right order)
                                        |    .med
                                        |    [4 x .small]`));
                                }

                - multiple levels of children

                    create html page {
                        await setPageBody(`
                            <div id="one" class="big">
                                <div id="two" class="med">
                                    <div id="five" class="small">foobar</div>
                                    <div id="six" class="small">foobar</div>
                                    <div id="seven" class="small">foobar</div>
                                </div>
                                <div id="three" class="med">
                                    <div id="eight" class="small">foobar</div>
                                    <div id="nine" class="small">foobar</div>
                                    <div id="ten" class="small">foobar</div>
                                </div>
                                <div id="four" class="med">foobar</div>
                            </div>
                            <div id="two" class="big">
                                <div id="eleven" class="other">
                                    <div id="twelve" class="small">foobar</div>
                                </div>
                            </div>
                        `);
                    }

                        - generic tests

                            - parent matches, child matches

                                - finds elements

                                    grandchild always matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        .small
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    grandchild sometimes matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        #six
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                    multiple grandchildren {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        #six
                                            |    .med
                                            |        #nine
                                            |        #ten
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(1);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                    }

                                - doesn't find elements

                                    grandchild never matches {
                                        let ef = new ElementFinder(regularize(`
                                            |.big
                                            |    .med
                                            |        .none
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big  -->  2 found, but none contain the right children (in the right order)
                                            |    .med
                                            |        .none`));
                                    }

                                    multiple grandchildren {
                                        let ef = new ElementFinder(regularize(`
                                            |.big, 1st
                                            |    .med
                                            |        .small
                                            |    .med
                                            |        .none
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |.big, 1st  -->  found, but doesn't contain the right children (in the right order)
                                            |    .med
                                            |        .small
                                            |    .med  -->  2 found, but none contain the right children (in the right order)
                                            |        .none`));
                                    }

                        - counter

                            - handles multiple levels of counters

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |1-5 x .big
                                        |    2-5 x .med
                                        |        3-5 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |1-5 x .big
                                        |    2-5 x .med
                                        |        4-5 x .small
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |1-5 x .big  -->  2 found, but none contain the right children (in the right order)
                                        |    2-5 x .med
                                        |        4-5 x .small`));
                                }

                        - keywords

                            - handles multiple levels of 'any order'

                                finds elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        #nine
                                        |        #eight
                                        |    .med
                                        |        #six
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                doesn't find elements {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        #nine
                                        |        #none
                                        |    .med
                                        |        #six
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children
                                        |    any order
                                        |    .med
                                        |        any order
                                        |        #nine
                                        |        #none
                                        |    .med
                                        |        #six`));
                                }

                        - match me

                            []'s on multiple levels {
                                let ef = new ElementFinder(regularize(`
                                    |[.big]
                                    |    [.med]
                                    |        [#six]
                                    |    .med
                                    |        [#ten]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(4);
                                expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                expect(await results.matches[1].getAttribute('id')).to.equal('two');
                                expect(await results.matches[2].getAttribute('id')).to.equal('six');
                                expect(await results.matches[3].getAttribute('id')).to.equal('ten');
                            }

                            []'s matches multiple elements when its parent matches multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |.big
                                    |    1+ x .med
                                    |        [1+ x .small]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(6);
                                expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                expect(await results.matches[2].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[3].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[4].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[5].getAttribute('id')).to.equal('ten');
                            }

                            []'s matches multiple elements when its grandparent matches multiple elements {
                                let ef = new ElementFinder(regularize(`
                                    |1+ x .big
                                    |    1+ x div
                                    |        [1+ x .small]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(7);
                                expect(await results.matches[0].getAttribute('id')).to.equal('five');
                                expect(await results.matches[1].getAttribute('id')).to.equal('six');
                                expect(await results.matches[2].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[3].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[4].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[5].getAttribute('id')).to.equal('ten');
                                expect(await results.matches[6].getAttribute('id')).to.equal('twelve');
                            }

            - element array EFs

                create html page {
                    await setPageBody(`
                        <div id="one" class="big">
                            <div id="two" class="med">
                                <div id="five" class="small">foobar</div>
                                <div id="six" class="small">foobar</div>
                                <div id="seven" class="small">foobar</div>
                            </div>
                            <div id="three" class="med">
                                <div id="eight" class="small">foobar</div>
                                <div id="nine" class="small">foobar</div>
                                <div id="ten" class="small">foobar</div>
                            </div>
                            <div id="four" class="med">foobar</div>
                        </div>
                        <div id="two" class="big">
                            <div id="eleven" class="other">
                                <div id="twelve" class="small">foobar</div>
                            </div>
                        </div>
                    `);
                }

                    - one line

                        - empty element array

                            - top element exists

                                top element has children {
                                    let ef = new ElementFinder(`* .big`);

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .big
                                        |
                                        |    --> missing
                                        |    div#one.big
                                        |
                                        |    --> missing
                                        |    div#two.big
                                        |`));
                                }

                                top element has no children {
                                    let ef = new ElementFinder(`* #six`);

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* #six
                                        |
                                        |    --> missing
                                        |    div#six.small
                                        |`));
                                }

                                element array correctly matches zero elements {
                                    let ef = new ElementFinder(`
                                        body
                                            * #none
                                    `);

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getTagName()).to.equal('body');
                                }

                            - top element doesn't exist

                                element array correctly matches zero elements {
                                    let ef = new ElementFinder(`* #none`);

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(0);
                                }

                    - one level of children

                        - element array on child

                            - accepts a correct matching

                                parent matches once and element array matches correctly {
                                    let ef = new ElementFinder(regularize(`
                                        |.big, 1st
                                        |    * .med
                                        |        #two
                                        |        #three
                                        |        #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                parent matches multiple times and element array matches sometimes {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    * .med
                                        |        #two
                                        |        #three
                                        |        #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                            - rejects an incorrect matching

                                parent matches once and element array never matches fully {
                                    let ef = new ElementFinder(regularize(`
                                        |.big, 1st
                                        |    * .med
                                        |        #two
                                        |        #none
                                        |        #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big, 1st  -->  found, but doesn't contain the right children (in the right order)
                                        |    * .med
                                        |        #two
                                        |        #none  -->  doesn't match div#three.med
                                        |        #four`));
                                }

                                parent matches once and element array never matches on any child {
                                    let ef = new ElementFinder(regularize(`
                                        |.big, 1st
                                        |    * .none
                                        |        #none
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big, 1st  -->  found, but doesn't contain the right children (in the right order)
                                        |    * .none
                                        |        #none  -->  not found`));
                                }

                                parent matches multiple times and element array never matches fully {
                                    let ef = new ElementFinder(regularize(`
                                        |.big
                                        |    * .med
                                        |        #two
                                        |        #none
                                        |        #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |.big  -->  2 found, but none contain the right children (in the right order)
                                        |    * .med
                                        |        #two
                                        |        #none
                                        |        #four`));
                                }

                        - element array on parent

                            - accepts a correct matching

                                generic correct matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |    #three
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                }

                                correct matching, even when the matched element type exists at different depths in the DOM, and with other elements in between {
                                    let ef = new ElementFinder(regularize(`
                                        |* selector '.med, #twelve'
                                        |    #two
                                        |    #three
                                        |    #four
                                        |    #twelve
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(4);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    expect(await results.matches[3].getAttribute('id')).to.equal('twelve');
                                }

                            - rejects an incorrect matching

                                too few elements listed {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #two
                                        |    #four  -->  doesn't match div#three.med
                                        |
                                        |    --> missing
                                        |    div#four.med
                                        |`));
                                }

                                too many elements listed {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |    #three
                                        |    #four
                                        |    #five
                                        |    #six
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #two
                                        |    #three
                                        |    #four
                                        |    #five  -->  not found
                                        |    #six  -->  not found`));
                                }

                                the elements are correct but in the wrong order {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #four
                                        |    #three
                                        |    #two
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #four  -->  doesn't match div#two.med
                                        |    #three
                                        |    #two  -->  doesn't match div#four.med`));
                                }

                                the elements listed don't match {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #none
                                        |    #none
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #none  -->  doesn't match div#two.med
                                        |    #none  -->  doesn't match div#three.med
                                        |
                                        |    --> missing
                                        |    div#four.med
                                        |`));
                                }

                        - nested element arrays

                            - element array inside a normal EF inside an element array

                                accepts a correct matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .big, 1st
                                        |    .big
                                        |        * .med
                                        |            3 x .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(1);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('one');
                                }

                                rejects an incorrect matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .big, 1st
                                        |    .big
                                        |        * .med
                                        |            4 x .med
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .big, 1st
                                        |    .big
                                        |        * .med
                                        |            4 x .med  -->  only found 3`));
                                }

                        - counter

                            - counter on child

                                - accepts a correct matching

                                    counters allow correct matching {
                                        let ef = new ElementFinder(regularize(`
                                            |* .med
                                            |    3 x .med
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                    counter of 1+ allows correct matching {
                                        let ef = new ElementFinder(regularize(`
                                            |* .med
                                            |    1+ x .med
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                    number of elements are between the counter's min and max {
                                        let ef = new ElementFinder(regularize(`
                                            |* .med
                                            |    2-4 x .med
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                    there are more elements than a counter's min, and no max exists {
                                        let ef = new ElementFinder(regularize(`
                                            |* .med
                                            |    2- x .med
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.false;
                                        expect(results.matches).to.have.lengthOf(3);
                                        expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                        expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                        expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                    }

                                - rejects an incorrect matching

                                    there are more elements than a counter's max {
                                        let ef = new ElementFinder(regularize(`
                                            |* .med
                                            |    0-2 x .med
                                        `));

                                        let results = await ef.getAll(browser.driver);
                                        results.ef = ElementFinder.parseObj(results.ef);

                                        expect(results.ef.hasErrors()).to.be.true;
                                        expect(results.matches).to.have.lengthOf(0);
                                        expect(results.ef.print()).to.equal(regularize(`
                                            |* .med
                                            |    0-2 x .med
                                            |
                                            |    --> missing
                                            |    div#four.med
                                            |`));
                                    }

                                    - there are fewer elements than a counter's min

                                        0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |* .med
                                                |    4- x .none
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |* .med
                                                |    4- x .none  -->  doesn't match div#two.med
                                                |
                                                |    --> missing
                                                |    div#three.med
                                                |
                                                |    --> missing
                                                |    div#four.med
                                                |`));
                                        }

                                        more than 0 elements {
                                            let ef = new ElementFinder(regularize(`
                                                |* .med
                                                |    4- x .med
                                            `));

                                            let results = await ef.getAll(browser.driver);
                                            results.ef = ElementFinder.parseObj(results.ef);

                                            expect(results.ef.hasErrors()).to.be.true;
                                            expect(results.matches).to.have.lengthOf(0);
                                            expect(results.ef.print()).to.equal(regularize(`
                                                |* .med
                                                |    4- x .med  -->  only found 3`));
                                        }

                            - counter on parent

                                rejects a counter on an element array {
                                    assert.throws(() => {
                                        new ElementFinder(regularize(`
                                            |* 2 x .med
                                            |    #two
                                            |    #three
                                        `));
                                    }, `An element array is not allowed to have a counter [line:1]`);
                                }

                        - 'any order' keyword

                            - accepts a correct matching

                                same order {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    any order
                                        |    #two
                                        |    #three
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                }

                                different order {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    any order
                                        |    #four
                                        |    #three
                                        |    #two
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('four');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('two');
                                }

                            rejects an incorrect matching {
                                let ef = new ElementFinder(regularize(`
                                    |* .med
                                    |    any order
                                    |    #two
                                    |    #three
                                    |    #three
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.true;
                                expect(results.matches).to.have.lengthOf(0);
                                expect(results.ef.print()).to.equal(regularize(`
                                    |* .med
                                    |    any order
                                    |    #two
                                    |    #three
                                    |    #three  -->  not found (zero matches after \`#three\` applied)
                                    |
                                    |    --> missing
                                    |    div#four.med
                                    |`));
                            }

                        - match me

                            matches elements with [] on an element array parent {
                                let ef = new ElementFinder(regularize(`
                                    |* [.med]
                                    |    #two
                                    |    #three
                                    |    #four
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(3);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                expect(await results.matches[2].getAttribute('id')).to.equal('four');
                            }

                            matches elements with [] on an element array child {
                                let ef = new ElementFinder(regularize(`
                                    |* .med
                                    |    #two
                                    |    [#three]
                                    |    [#four]
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(2);
                                expect(await results.matches[0].getAttribute('id')).to.equal('three');
                                expect(await results.matches[1].getAttribute('id')).to.equal('four');
                            }

                    - multiple levels of children

                        - generic tests

                            - element array with multiple levels of children

                                accepts a correct matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |        #five
                                        |        #seven
                                        |    #three
                                        |        'foobar'
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                }

                                rejects an incorrect matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |        #five
                                        |        #none
                                        |    #three
                                        |        'foobar'
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #two
                                        |        #five
                                        |        #none  -->  not found (zero matches after \`#none\` applied)
                                        |    #three
                                        |        'foobar'
                                        |    #four`));
                                }

                            - nested element arrays on multiple levels of children

                                accepts a correct matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |        * .small
                                        |            #five
                                        |            #six
                                        |            #seven
                                        |    #three
                                        |        * .small
                                        |            3 x 'foobar'
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.false;
                                    expect(results.matches).to.have.lengthOf(3);
                                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                    expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                    expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                }

                                rejects an incorrect matching {
                                    let ef = new ElementFinder(regularize(`
                                        |* .med
                                        |    #two
                                        |        * .small
                                        |            #five
                                        |            #six
                                        |            #seven
                                        |    #three
                                        |        * .small
                                        |            4 x 'foobar'
                                        |    #four
                                    `));

                                    let results = await ef.getAll(browser.driver);
                                    results.ef = ElementFinder.parseObj(results.ef);

                                    expect(results.ef.hasErrors()).to.be.true;
                                    expect(results.matches).to.have.lengthOf(0);
                                    expect(results.ef.print()).to.equal(regularize(`
                                        |* .med
                                        |    #two
                                        |        * .small
                                        |            #five
                                        |            #six
                                        |            #seven
                                        |    #three
                                        |        * .small
                                        |            4 x 'foobar'  -->  only found 3
                                        |    #four`));
                                }

                        - match me

                            matches elements with [] on an element array grandchild {
                                let ef = new ElementFinder(regularize(`
                                    |* .med
                                    |    #two
                                    |        * .small
                                    |            #five
                                    |            #six
                                    |            [#seven]
                                    |    #three
                                    |        * .small
                                    |            [3 x 'foobar']
                                    |    #four
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(4);
                                expect(await results.matches[0].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[1].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[2].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[3].getAttribute('id')).to.equal('ten');
                            }

                            matches elements with [] on multiple levels of an element array {
                                let ef = new ElementFinder(regularize(`
                                    |* [.med]
                                    |    [#two]
                                    |        * .small
                                    |            #five
                                    |            #six
                                    |            [#seven]
                                    |    #three
                                    |        * [.small]
                                    |            [3 x 'foobar']
                                    |    #four
                                `));

                                let results = await ef.getAll(browser.driver);
                                results.ef = ElementFinder.parseObj(results.ef);

                                expect(results.ef.hasErrors()).to.be.false;
                                expect(results.matches).to.have.lengthOf(7);
                                expect(await results.matches[0].getAttribute('id')).to.equal('two');
                                expect(await results.matches[1].getAttribute('id')).to.equal('three');
                                expect(await results.matches[2].getAttribute('id')).to.equal('four');
                                expect(await results.matches[3].getAttribute('id')).to.equal('seven');
                                expect(await results.matches[4].getAttribute('id')).to.equal('eight');
                                expect(await results.matches[5].getAttribute('id')).to.equal('nine');
                                expect(await results.matches[6].getAttribute('id')).to.equal('ten');
                            }

            - other

                only searches within the given parent element {
                    await setPageBody(`
                        <div id="two" class="big">
                            <div id="five" class="small">foobar</div>
                            <div id="six" class="small">foobar</div>
                            <div id="seven" class="small">foobar</div>
                        </div>
                        <div id="three" class="big">
                            <div id="eight" class="small">foobar</div>
                            <div id="nine" class="small">foobar</div>
                            <div id="ten" class="small">foobar</div>
                        </div>
                        <div id="four" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`#three`);
                    let results = await ef.getAll(browser.driver);
                    let parent = results.matches[0];

                    ef = new ElementFinder(`0+ x .small`);
                    results = await ef.getAll(browser.driver, parent);
                    results.ef = ElementFinder.parseObj(results.ef);

                    expect(results.ef.hasErrors()).to.be.false;
                    expect(results.matches).to.have.lengthOf(3);
                    expect(await results.matches[0].getAttribute('id')).to.equal('eight');
                    expect(await results.matches[1].getAttribute('id')).to.equal('nine');
                    expect(await results.matches[2].getAttribute('id')).to.equal('ten');
                }

                handles finding an iframe {
                    await setPageBody(`
                        <div id="one" class="big">
                            <iframe id="two" src="/something">
                        </div>
                    `);

                    let ef = new ElementFinder(`#two, enabled`);

                    let results = await ef.getAll(browser.driver);
                    results.ef = ElementFinder.parseObj(results.ef);

                    expect(results.ef.hasErrors()).to.be.false;
                    expect(results.matches).to.have.lengthOf(1);
                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                }

                handles finding an svg {
                    await setPageBody(`
                        <div id="one" class="big">
                            <svg id="two" src="/something">
                        </div>
                    `);

                    let ef = new ElementFinder(`#two, enabled`);

                    let results = await ef.getAll(browser.driver);
                    results.ef = ElementFinder.parseObj(results.ef);

                    expect(results.ef.hasErrors()).to.be.false;
                    expect(results.matches).to.have.lengthOf(1);
                    expect(await results.matches[0].getAttribute('id')).to.equal('two');
                }

            - $s performance
                // NOTE: the sizes below were the maximum sizes attainable on a MacOS test machine without exceeding 10s+ of processing time

                create html page {
                    let html = '';
                    for(let i = 0; i < 50; i++) {
                        html += `<div id='i${i}'>`;

                        for(let j = 0; j < 100; j++) {
                            html += `<div id='j${j}'>`;

                            for(let k = 0; k < 100; k++) {
                                html += `<div id='k${k}'>`;
                                html += `foobar`;
                                html += `</div>`;
                            }

                            html += `</div>`;
                        }

                        html += `</div>`;
                    }

                    await setPageBody(html);
                }

                    handles very large DOMs {
                        let ef = new ElementFinder(`
                            #i25
                                #j50
                                    [#k50]
                        `);

                        let results = await ef.getAll(browser.driver);
                        results.ef = ElementFinder.parseObj(results.ef);

                        expect(results.ef.hasErrors()).to.be.false;
                        expect(results.matches).to.have.lengthOf(1);
                        expect(await results.matches[0].getAttribute('id')).to.equal('k50');
                    }

                    handles very large EFs {
                        let ef = `#i25\n`;
                        for(let j = 0; j < 100; j++) {
                            ef += `    #j${j}\n`;

                            for(let k = 0; k < 10; k++) {
                                ef += `        #k${k}\n`;
                            }
                        }

                        ef = new ElementFinder(ef);

                        let results = await ef.getAll(browser.driver);
                        results.ef = ElementFinder.parseObj(results.ef);

                        expect(results.ef.hasErrors()).to.be.false;
                        expect(results.matches).to.have.lengthOf(1);
                        expect(await results.matches[0].getAttribute('id')).to.equal('i25');
                    }

                    handles finding a very large number of elements {
                        let ef = new ElementFinder(`
                            #i25
                                10 x div
                                    [0+ x div]
                        `);

                        let results = await ef.getAll(browser.driver);
                        results.ef = ElementFinder.parseObj(results.ef);

                        expect(results.ef.hasErrors()).to.be.false;
                        expect(results.matches).to.have.lengthOf(1000);
                    }

        - find() tests

            create html page {
                await setPageBody(`
                    <div id="two" class="big">foobar</div>
                    <div id="three" class="big">foobar</div>
                    <div id="four" class="big">foobar</div>
                `);
            }

                - isNot set to false

                    - if multiple elements are found immediately

                        sends back all elements {
                            let ef = new ElementFinder(`0+ x .big`);
                            let results = await ef.find(browser.driver, undefined, false, false, 3000, 500);

                            expect(results).to.have.lengthOf(3);
                            expect(await results[0].getAttribute('id')).to.equal('two');
                            expect(await results[1].getAttribute('id')).to.equal('three');
                            expect(await results[2].getAttribute('id')).to.equal('four');
                        }

                        - if EF's counter never set

                            sends back the first matched element {
                                let ef = new ElementFinder(`.big`);
                                let results = await ef.find(browser.driver, undefined, false, false, 3000, 500);

                                expect(results).to.have.lengthOf(1);
                                expect(await results[0].getAttribute('id')).to.equal('two');
                            }

                    - if an element is found, but later on

                        sends back those elements as soon as they're found {
                            setTimeout(() => setPageBody(`
                                <div id="five" class="med">foobar</div>
                            `), 2000);

                            let ef = new ElementFinder(`.med`);
                            let results = await ef.find(browser.driver, undefined, false, false, 3000, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('five');
                        }

                    - if nothing is ever found

                        - it throws an error

                            generic case {
                                let ef = new ElementFinder(`.none`);
                                await expect(ef.find(browser.driver, undefined, false, false, 1000, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found in time (1 s):
                                    |
                                    |.none  \u001b[0m\u001b[31m-->  not found (zero matches after \`.none\` applied)\u001b[0m\u001b[30m`));
                            }

                            if timeout is 0 {
                                let ef = new ElementFinder(`.none`);
                                await expect(ef.find(browser.driver, undefined, false, false, 0, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found:
                                    |
                                    |.none  \u001b[0m\u001b[31m-->  not found (zero matches after \`.none\` applied)\u001b[0m\u001b[30m`));
                            }

                            if timeout is omitted {
                                let ef = new ElementFinder(`.none`);
                                await expect(ef.find(browser.driver, undefined, false, false, undefined, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found:
                                    |
                                    |.none  \u001b[0m\u001b[31m-->  not found (zero matches after \`.none\` applied)\u001b[0m\u001b[30m`));
                            }

                            if element appears after the timeout {
                                setTimeout(() => setPageBody(`
                                    <div id="five" class="med">foobar</div>
                                `), 2000);

                                let ef = new ElementFinder(`.med`);
                                await expect(ef.find(browser.driver, undefined, false, false, 1000, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found in time (1 s):
                                    |
                                    |.med  \u001b[0m\u001b[31m-->  not found (zero matches after \`.med\` applied)\u001b[0m\u001b[30m`));

                                await new Promise(res => setTimeout(res, 2000)); // wait 2 more secs, so that browser is still around when setTimeout() goes off
                            }

                        sets error's continue properly {
                            let ef = new ElementFinder(`.none`);
                            let error = null;
                            try {
                                await ef.find(browser.driver, undefined, false, true, 100, 500);
                            }
                            catch(e) {
                                error = e;
                            }

                            expect(error != null).to.be.true;
                            expect(error.continue).to.be.true;
                        }

                - isNot set to true

                    - if multiple elements are found immediately

                        - if those elements disappear before the timeout

                            doesn't throw error {
                                setTimeout(() => setPageBody(`
                                    <div id="five" class="med">foobar</div>
                                `), 1000);

                                let ef = new ElementFinder(`1+ x .big`);
                                let results = await ef.find(browser.driver, undefined, true, false, 1500);
                            }

                        [
                            if those elements don't disappear before the timeout -

                            if those elements disappear after the timeout {
                                setTimeout(() => setPageBody(`
                                    <div id="five" class="med">foobar</div>
                                `), 5000);
                            }
                        ]

                            throws error and sets error's continue properly {
                                let ef = new ElementFinder(`1+ x .big`);
                                await expect(ef.find(browser.driver, undefined, true, false, 1500)).to.be.rejectedWith(`Elements still found after timeout (1.5 s)`);

                                await new Promise(res => setTimeout(res, 5000)); // wait 5 more secs, so that browser is still around when setTimeout() goes off
                            }

                    - if nothing is ever found

                        because those elements never exist in the DOM -

                        because those elements are never visible {
                            await setPageBody(`
                                <div id="five" class="med" style="display:none">foobar</div>
                            `);
                        }

                            doesn't throw error {
                                let ef = new ElementFinder(`.med`);
                                let results = await ef.find(browser.driver, undefined, true, false, 500);
                            }

        - defaultProps() tests

            - visible

                finds elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`.big, visible`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <div id="one" class="big" style="display:none">foobar</div>
                    `);

                    let ef = new ElementFinder(`.big, visible`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, visible  \u001b[0m\u001b[31m-->  not found (zero matches after \`visible\` applied)\u001b[0m\u001b[30m`));
                }

            - not visible

                finds elements {
                    await setPageBody(`
                        <div id="one" class="big" style="display:none">foobar</div>
                    `);

                    let ef = new ElementFinder(`.big, not visible`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`.big, not visible`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, not visible  \u001b[0m\u001b[31m-->  not found (zero matches after \`not visible\` applied)\u001b[0m\u001b[30m`));
                }

            - any visibility

                finds elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                        <div id="two" class="big" style="display:none">foobar</div>
                    `);

                    let ef = new ElementFinder(`1+ x .big, any visibility`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(2);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                    expect(await results[1].getAttribute('id')).to.equal('two');
                }

                doesn't find elements {
                    await setPageBody(`
                    `);

                    let ef = new ElementFinder(`1+ x .big, any visibility`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Elements not found in time (0.5 s):
                        |
                        |1+ x .big, any visibility  \u001b[0m\u001b[31m-->  not found (zero matches after \`.big\` applied)\u001b[0m\u001b[30m`));
                }

            - enabled

                finds elements {
                    await setPageBody(`
                        <input type="text" id="one" class="big">
                    `);

                    let ef = new ElementFinder(`.big, enabled`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <input type="text" id="one" class="big" disabled>
                    `);

                    let ef = new ElementFinder(`.big, enabled`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, enabled  \u001b[0m\u001b[31m-->  not found (zero matches after \`enabled\` applied)\u001b[0m\u001b[30m`));
                }

            - disabled

                finds elements {
                    await setPageBody(`
                        <input type="text" id="one" class="big" disabled>
                    `);

                    let ef = new ElementFinder(`.big, disabled`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <input type="text" id="one" class="big">
                    `);

                    let ef = new ElementFinder(`.big, disabled`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, disabled  \u001b[0m\u001b[31m-->  not found (zero matches after \`disabled\` applied)\u001b[0m\u001b[30m`));
                }

            - checked

                finds elements {
                    await setPageBody(`
                        <input type="checkbox" id="one" class="big" checked>
                    `);

                    let ef = new ElementFinder(`.big, checked`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <input type="checkbox" id="one" class="big">
                    `);

                    let ef = new ElementFinder(`.big, checked`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, checked  \u001b[0m\u001b[31m-->  not found (zero matches after \`checked\` applied)\u001b[0m\u001b[30m`));
                }

            - unchecked

                finds elements {
                    await setPageBody(`
                        <input type="checkbox" id="one" class="big">
                    `);

                    let ef = new ElementFinder(`.big, unchecked`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <input type="checkbox" id="one" class="big" checked>
                    `);

                    let ef = new ElementFinder(`.big, unchecked`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, unchecked  \u001b[0m\u001b[31m-->  not found (zero matches after \`unchecked\` applied)\u001b[0m\u001b[30m`));
                }

            - selected

                finds elements {
                    await setPageBody(`
                        <select>
                            <option value="one">One</option>
                            <option value="two">Two</option>
                            <option value="three" selected>Three</option>
                            <option value="four">Four</option>
                        </select>
                    `);

                    let ef = new ElementFinder(`option, any visibility, selected`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('value')).to.equal('three');
                }

                doesn't find elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`.big, selected`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.big, selected  \u001b[0m\u001b[31m-->  not found (zero matches after \`selected\` applied)\u001b[0m\u001b[30m`));
                }

            - $s focused
                // NOTE: only works in non-headless mode, so run this separately

                finds elements {
                    await setPageBody(`
                        <input id="one" class="big" autofocus>
                    `);

                    await browser.executeScript(function() {
                        document.getElementById("one").focus();
                    });

                    let ef = new ElementFinder(`#one, focused`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(1);
                    expect(await results[0].getAttribute('id')).to.equal('one');
                }

                doesn't find elements {
                    await setPageBody(`
                        <input id="one" class="big">
                        <input id="two" class="big" autofocus>
                    `);

                    let ef = new ElementFinder(`#one, focused`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |#one, focused  \u001b[0m\u001b[31m-->  not found (zero matches after \`focused\` applied)\u001b[0m\u001b[30m`));
                }

            - element

                finds elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                        <div id="two" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`0+ x element`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(4);
                    expect((await results[0].getTagName()).toLowerCase()).to.equal('html');
                    expect((await results[1].getTagName()).toLowerCase()).to.equal('body');
                    expect(await results[2].getAttribute('id')).to.equal('one');
                    expect(await results[3].getAttribute('id')).to.equal('two');
                }

            - clickable

                finds elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                        <div id="two" class="big" style="cursor:pointer">foobar</div>
                        <a id="three" href="/">Link</a>
                        <button id="four">Button</button>
                    `);

                    let ef = new ElementFinder(`1+ x clickable`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(3);
                    expect(await results[0].getAttribute('id')).to.equal('two');
                    expect(await results[1].getAttribute('id')).to.equal('three');
                    expect(await results[2].getAttribute('id')).to.equal('four');
                }

                doesn't find elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                    `);

                    let ef = new ElementFinder(`1+ x clickable`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Elements not found in time (0.5 s):
                        |
                        |1+ x clickable  \u001b[0m\u001b[31m-->  not found (zero matches after \`clickable\` applied)\u001b[0m\u001b[30m`));
                }

                finds elements but skips disabled elements {
                    await setPageBody(`
                        <div id="one" class="big">foobar</div>
                        <div id="two" class="big" style="cursor:pointer">foobar</div>
                        <a id="three" href="/">Link</a>
                        <button id="four">Button</button>
                        <input id="five" disabled />
                    `);

                    let ef = new ElementFinder(`1+ x clickable`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(3);
                    expect(await results[0].getAttribute('id')).to.equal('two');
                    expect(await results[1].getAttribute('id')).to.equal('three');
                    expect(await results[2].getAttribute('id')).to.equal('four');
                }

            - page title

                set page title {
                    await browser.executeScript(function() {
                        document.title = "foobar";
                    });
                }

                    finds elements {
                        let ef = new ElementFinder(`page title 'foobar'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`page title 'bad'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |page title 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page title 'bad'\` applied)\u001b[0m\u001b[30m`));
                    }

            - page title contains

                set page title {
                    await browser.executeScript(function() {
                        document.title = " FOOBAR ";
                    });
                }

                    finds elements {
                        let ef = new ElementFinder(`page title contains 'foo'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`page title contains 'bad'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |page title contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page title contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                    }

            - page url

                - relative

                    - top level url (/)

                        nav to page {
                            await browser.nav('example.com');
                        }

                            finds elements {
                                let ef = new ElementFinder(`page url '/'`);
                                let results = await ef.find(browser.driver, undefined, false, false, 500);

                                expect(results).to.have.lengthOf(1);
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`page url '/wrong'`);
                                await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found in time (0.5 s):
                                    |
                                    |page url '/wrong'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page url '/wrong'\` applied)\u001b[0m\u001b[30m`));
                            }

                    - non-top level url

                        nav to page {
                            await browser.nav('example.com/something');
                        }

                            finds elements {
                                let ef = new ElementFinder(`page url '/something'`);
                                let results = await ef.find(browser.driver, undefined, false, false, 500);

                                expect(results).to.have.lengthOf(1);
                            }

                            doesn't find elements {
                                let ef = new ElementFinder(`page url '/'`);
                                await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                    |Element not found in time (0.5 s):
                                    |
                                    |page url '/'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page url '/'\` applied)\u001b[0m\u001b[30m`));
                            }

                - absolute

                    nav to page {
                        await browser.nav('example.com');
                    }

                        finds elements {
                            let ef = new ElementFinder(`page url 'http://example.com/'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`page url 'http://wrong.com/'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Element not found in time (0.5 s):
                                |
                                |page url 'http://wrong.com/'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page url 'http://wrong.com/'\` applied)\u001b[0m\u001b[30m`));
                        }

            - page url contains

                nav to page {
                    await browser.nav('example.com/foobar/blah');
                }

                    finds elements {
                        let ef = new ElementFinder(`page url contains 'foo'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`page url contains 'bad'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |page url contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`page url contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                    }

            - next to

                - finds the best element

                    one hop {
                        await setPageBody(`
                            <div id="one" class="big">
                                New York
                                <div id="five" class="small">foobar</div>
                            </div>
                            <div id="two" class="big">
                                Paris
                                <div id="six" class="small">foobar</div>
                                <!-- first place -->
                            </div>
                            <div id="three" class="big">
                                Paris
                                <div id="seven" class="med">
                                    <span id="eight" class="small">foobar</span>
                                    <!-- second place -->
                                </div>
                            </div>
                            <div id="four" class="big">
                                Tokyo
                                <div id="nine" class="small">foobar</div>
                            </div>
                        `);

                        let ef = new ElementFinder(`0+ x .small, next to 'Paris'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('six');
                    }

                    multiple hops {
                        await setPageBody(`
                            <div id="one" class="big">
                                New York
                                <div id="four" class="med">
                                    <span id="seven" class="small">foobar</span>
                                </div>
                            </div>
                            <div id="two" class="big">
                                Paris
                                <div id="five" class="med">
                                    <span id="eight" class="small">foobar</span>
                                </div>
                            </div>
                            <div id="three" class="big">
                                Tokyo
                                <div id="six" class="med">
                                    <span id="nine" class="small">foobar</span>
                                </div>
                            </div>
                        `);

                        let ef = new ElementFinder(`0+ x .small, next to 'Paris'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('eight');
                    }

                finds multiple elements if there's a tie {
                    await setPageBody(`
                        <div id="one" class="big">
                            New York
                            <div id="four" class="small">foobar</div>
                        </div>
                        <div id="two" class="big">
                            Paris
                            <div id="five" class="small">foobar</div>
                        </div>
                        <div id="three" class="big">
                            <div id="six" class="small">foobar</div>
                            New  YORK
                        </div>
                    `);

                    let ef = new ElementFinder(`0+ x .small, next to 'new york'`);
                    let results = await ef.find(browser.driver, undefined, false, false, 500);

                    expect(results).to.have.lengthOf(2);
                    expect(await results[0].getAttribute('id')).to.equal('four');
                    expect(await results[1].getAttribute('id')).to.equal('six');
                }

                doesn't find elements if the text doesn't exist on the page {
                    await setPageBody(`
                        <div id="one" class="big">
                            New York
                            <div id="four" class="small">foobar</div>
                        </div>
                        <div id="two" class="big">
                            Paris
                            <div id="five" class="small">foobar</div>
                        </div>
                        <div id="three" class="big">
                            <div id="six" class="small">foobar</div>
                            New  YORK
                        </div>
                    `);

                    let ef = new ElementFinder(`.small, next to 'blah'`);
                    await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                        |Element not found in time (0.5 s):
                        |
                        |.small, next to 'blah'  \u001b[0m\u001b[31m-->  not found (zero matches after \`next to 'blah'\` applied)\u001b[0m\u001b[30m`));
                }

            - value

                create html page {
                    await setPageBody(`
                        <input id="one" value="777">
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`input, value '777'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('one');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`input, value '666'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |input, value '666'  \u001b[0m\u001b[31m-->  not found (zero matches after \`value '666'\` applied)\u001b[0m\u001b[30m`));
                    }

            - contains

                - in innerText

                    create html page {
                        await setPageBody(`
                            <div id="one">Alpha</div>
                            <div id="two">Beta</div>
                            <div id="three">FOO  BAR</div>
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x div, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x div, contains 'bad'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x div, contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in SVG (textContent)

                    create html page {
                        await setPageBody(`
                            <svg>
                                <text>foo bar</text>
                            </svg>
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`text, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                        }

                - in value

                    create html page {
                        await setPageBody(`
                            <input id="one" value="Alpha">
                            <input id="two" value="Beta">
                            <input id="three" value="FOO  BAR">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains 'bad'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in placeholder

                    create html page {
                        await setPageBody(`
                            <input id="one" placeholder="Alpha">
                            <input id="two" placeholder="Beta">
                            <input id="three" placeholder="FOO  BAR">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains 'bad'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in label text

                    create html page {
                        await setPageBody(`
                            <label for="one">Alpha</label><input id="one" type="checkbox">
                            <label for="two">Beta</label><input id="two" type="checkbox">
                            <label for="three">FOO  BAR</label><input id="three" type="checkbox">
                            <label for="four">Gamma</label><input id="four" type="checkbox">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains 'bad'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains 'bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains 'bad'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in dropdown option text

                    create html page {
                        await setPageBody(`
                            <select id="five">
                                <option value="one" id="one">Alpha</option>
                                <option value="two" id="two">Beta</option>
                                <option value="three" id="three" selected>FOO  BAR</option>
                                <option value="four" id="four">Gamma</option>
                            </select>
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x select, contains 'foo bar'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('five');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x select, contains 'beta'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x select, contains 'beta'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains 'beta'\` applied)\u001b[0m\u001b[30m`));
                        }

            - contains exact

                - in innerText

                    create html page {
                        await setPageBody(`
                            <div id="one">Alpha</div>
                            <div id="two">Beta</div>
                            <div id="three">FOO BAR</div>
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x div, contains exact 'FOO BAR'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x div, contains exact 'foo bar'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x div, contains exact 'foo bar'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains exact 'foo bar'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in value

                    create html page {
                        await setPageBody(`
                            <input id="one" value="Alpha">
                            <input id="two" value="Beta">
                            <input id="three" value="FOO BAR">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'FOO BAR'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'foo bar'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains exact 'foo bar'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains exact 'foo bar'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in placeholder

                    create html page {
                        await setPageBody(`
                            <input id="one" placeholder="Alpha">
                            <input id="two" placeholder="Beta">
                            <input id="three" placeholder="FOO BAR">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'FOO BAR'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'foo bar'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains exact 'foo bar'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains exact 'foo bar'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in label text

                    create html page {
                        await setPageBody(`
                            <label for="one">Alpha</label><input id="one" type="checkbox">
                            <label for="two">Beta</label><input id="two" type="checkbox">
                            <label for="three">FOO BAR</label><input id="three" type="checkbox">
                            <label for="four">Gamma</label><input id="four" type="checkbox">
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'FOO BAR'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('three');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x input, contains exact 'foo bar'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x input, contains exact 'foo bar'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains exact 'foo bar'\` applied)\u001b[0m\u001b[30m`));
                        }

                - in dropdown option text

                    create html page {
                        await setPageBody(`
                            <select id="five">
                                <option value="one" id="one">Alpha</option>
                                <option value="two" id="two">Beta</option>
                                <option value="three" id="three" selected>FOO BAR</option>
                                <option value="four" id="four">Gamma</option>
                            </select>
                        `);
                    }

                        finds elements {
                            let ef = new ElementFinder(`1+ x select, contains exact 'FOO BAR'`);
                            let results = await ef.find(browser.driver, undefined, false, false, 500);

                            expect(results).to.have.lengthOf(1);
                            expect(await results[0].getAttribute('id')).to.equal('five');
                        }

                        doesn't find elements {
                            let ef = new ElementFinder(`1+ x select, contains exact 'foo bar'`);
                            await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                                |Elements not found in time (0.5 s):
                                |
                                |1+ x select, contains exact 'foo bar'  \u001b[0m\u001b[31m-->  not found (zero matches after \`contains exact 'foo bar'\` applied)\u001b[0m\u001b[30m`));
                        }

            - innertext

                create html page {
                    await setPageBody(`
                        <div id="one">Alpha</div>
                        <div id="two">Beta</div>
                        <div id="three">FOO BAR</div>
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`1+ x div, innertext 'FOO'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('three');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`1+ x div, innertext 'foo'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Elements not found in time (0.5 s):
                            |
                            |1+ x div, innertext 'foo'  \u001b[0m\u001b[31m-->  not found (zero matches after \`innertext 'foo'\` applied)\u001b[0m\u001b[30m`));
                    }

            - selector

                create html page {
                    await setPageBody(`
                        <div id="one">Alpha</div>
                        <div id="two">Beta</div>
                        <div id="three">FOO BAR</div>
                        <div id="four">Gamma</div>
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`2 x selector 'div#two, #three'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(2);
                        expect(await results[0].getAttribute('id')).to.equal('two');
                        expect(await results[1].getAttribute('id')).to.equal('three');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`2 x selector 'div#bad'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Elements not found in time (0.5 s):
                            |
                            |2 x selector 'div#bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`selector 'div#bad'\` applied)\u001b[0m\u001b[30m`));
                    }

            - xpath

                create html page {
                    await setPageBody(`
                        <div id="one">Alpha</div>
                        <div id="two">Beta</div>
                        <div id="three">FOO BAR</div>
                        <div id="four">Gamma</div>
                    `);
                }

                    finds a single element {
                        let ef = new ElementFinder(`xpath '//div[2]'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('two');
                    }

                    finds multiple elements {
                        let ef = new ElementFinder(`4 x xpath '//div'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(4);
                        expect(await results[0].getAttribute('id')).to.equal('one');
                        expect(await results[1].getAttribute('id')).to.equal('two');
                        expect(await results[2].getAttribute('id')).to.equal('three');
                        expect(await results[3].getAttribute('id')).to.equal('four');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`xpath '//bad'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |xpath '//bad'  \u001b[0m\u001b[31m-->  not found (zero matches after \`xpath '//bad'\` applied)\u001b[0m\u001b[30m`));
                    }

            - style

                create html page {
                    await setPageBody(`
                        <div id="one" style="color: red">Alpha</div>
                        <div id="two" style="color: blue">Beta</div>
                        <div id="three" style="background-color: red; color: blue;">Gamma</div>
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`2 x style 'color:rgb(0, 0, 255)'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(2);
                        expect(await results[0].getAttribute('id')).to.equal('two');
                        expect(await results[1].getAttribute('id')).to.equal('three');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`2 x style 'color:rgb(100, 0, 0)'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Elements not found in time (0.5 s):
                            |
                            |2 x style 'color:rgb(100, 0, 0)'  \u001b[0m\u001b[31m-->  not found (zero matches after \`style 'color:rgb(100, 0, 0)'\` applied)\u001b[0m\u001b[30m`));
                    }

            - position

                create html page {
                    await setPageBody(`
                        <div id="one">Alpha</div>
                        <div id="two">Beta</div>
                        <div id="three">Gamma</div>
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`div, position '2'`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(1);
                        expect(await results[0].getAttribute('id')).to.equal('two');
                    }

                    doesn't find elements {
                        let ef = new ElementFinder(`div, position '4'`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |div, position '4'  \u001b[0m\u001b[31m-->  not found (zero matches after \`position '4'\` applied)\u001b[0m\u001b[30m`));
                    }

            - textbox

                create html page {
                    await setPageBody(`
                        <div id="one">Alpha</div>
                        <input type="text" id="two">
                        <input id="three">
                        <textarea id="four">
                        <input type="radio" id="five">
                    `);
                }

                    finds elements {
                        let ef = new ElementFinder(`1+ x textbox`);
                        let results = await ef.find(browser.driver, undefined, false, false, 500);

                        expect(results).to.have.lengthOf(3);
                        expect(await results[0].getAttribute('id')).to.equal('two');
                        expect(await results[1].getAttribute('id')).to.equal('three');
                        expect(await results[2].getAttribute('id')).to.equal('four');
                    }

                create html page {
                    await setPageBody(`
                        <input type="radio" id="five">
                    `);
                }

                    doesn't find elements {
                        let ef = new ElementFinder(`textbox`);
                        await expect(ef.find(browser.driver, undefined, false, false, 500)).to.be.rejectedWith(regularize(`
                            |Element not found in time (0.5 s):
                            |
                            |textbox  \u001b[0m\u001b[31m-->  not found (zero matches after \`textbox\` applied)\u001b[0m\u001b[30m`));
                    }
