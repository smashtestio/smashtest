* Open test page

    Open browser

        Init vars {
            g('setPageBody',
                async function(htmlStr) {
                    await browser.executeScript(function(htmlStr) {
                        document.body.innerHTML = htmlStr;
                    }, htmlStr);
                }
            );

            g(`test page location`, `file:///${dir()}/generic-page.html`);
        }

            Navigate to {test page location}

Open test page

    - Category: Actions

        - Navigate

            Navigate to {url:}
            Nav to {url:}

                {url} is 'http://www.example.com'
                    Verify at 'http://www.example.com/'

                {url} is 'https://www.example.com'
                    Verify at 'https://www.example.com/'

                {url} is 'https://www.example.com/something'
                    Verify at 'https://www.example.com/something'

                {url} is 'www.example.com'
                    Verify at 'http://www.example.com/'

            Navigate to 'http://www.example.com'
                Navigate to '/something'
                    Verify at 'http://www.example.com/something'

            Navigate to '/page'
                - Debug and manually verify above step fails #manual $s

            * Verify at {{url}} {
                let currUrl = await browser.driver.getCurrentUrl();
                if(currUrl != url) {
                    throw new Error(`Expected url: '${url}', Actual url: '${currUrl}'`);
                }
            }

        - Click

            - a button

                Generate page {
                    await setPageBody(`
                        <button id="target" onclick="document.getElementById('display').innerHTML = 'I was clicked'">click me</button>
                        <div id="display"></div>
                    `);

                    props({
                        'target button': `#target`
                    });
                }

                    Click [target button]

                        Verify ['I was clicked'] is visible

                    - with an API using no target element

                        Hover over [target button]

                            Click

                                Verify ['I was clicked'] is visible

                    - with an API using no target element 2

                        Hover over and click [target button]

                            Verify ['I was clicked'] is visible

            - an unclickable child of a clickable parent

                Generate page {
                    await setPageBody(`
                        <button id="target" onclick="document.getElementById('display').innerHTML = 'I was clicked'">
                            <div id="target-child">click me</div>
                        </button>
                        <div id="display"></div>
                    `);
                }

                    where a 'text' EF is used and automatically targets the parent {
                        props({
                            'target button': `'click me'`
                        });
                    }

                        Click [target button]

                            Verify the parent gets clicked

                    where an EF directly targets the child, and the click event has to reach the parent {
                        props({
                            'target button': `#target-child`
                        });
                    }

                        Click [target button]

                            Verify the parent gets clicked

                    * Verify the parent gets clicked
                        Verify ['I was clicked'] is visible

        - Native click

            Generate page {
                await setPageBody(`
                    <button id="target" onclick="document.getElementById('display').innerHTML = 'I was clicked'">click me</button>
                    <div id="display"></div>
                `);

                props({
                    'target button': `#target`
                });
            }

                Native click [target button]

                    Verify ['I was clicked'] is visible

        - Double click

            Generate page {
                await setPageBody(`
                    <button id="target" ondblclick="document.getElementById('display').innerHTML = 'I was double-clicked'">click me</button>
                    <div id="display"></div>
                `);

                props({
                    'target button': `#target`
                });
            }

                Double click [target button]

                    Verify ['I was double-clicked'] is visible

        - Hover over
            [
                - an element visible in the current viewport

                    Generate page {
                        await setPageBody(`
                            <button id="target" onmouseover="document.getElementById('display').innerHTML = 'I was hovered over'">hover over me</button>
                            <div id="display"></div>
                        `);

                        props({
                            'target button': `#target`
                        });
                    }

                - an element that needs to be scrolled to

                    Generate page {
                        let body = ``;
                        for(let i = 0; i < 500; i++) {
                            body += `<div>foobar</div>`;
                        }
                        body += `
                            <button id="target" onmouseover="document.getElementById('display').innerHTML = 'I was hovered over'">hover over me</button>
                            <div id="display"></div>
                        `;
                        await setPageBody(body);

                        props({
                            'target button': `#target`
                        });
                    }
            ]
                Hover over [target button]

                    Verify ['I was hovered over'] is visible

        - Scroll to
            [
                - an element visible in the current viewport

                    Generate page {
                        await setPageBody(`
                            <div id="target">foobar</div>
                        `);

                        props({
                            'target': `#target`
                        });
                    }

                - an element that needs to be scrolled to

                    Generate page {
                        let body = ``;
                        for(let i = 0; i < 500; i++) {
                            body += `<div>foobar</div>`;
                        }
                        body += `
                            <div id="target">foobar</div>
                        `;
                        await setPageBody(body);

                        props({
                            'target': `#target`
                        });
                    }
            ]
                Scroll to [target]

                    Verify target is scrolled into view {
                        let isScrolledIntoView = await executeScript(function(elem) {
                            var rect = elem.getBoundingClientRect();
                            return (rect.top >= 0) && (rect.bottom <= window.innerHeight);
                        }, await $(`target`));

                        expect(isScrolledIntoView).to.be.true;
                    }

        - Get cookie

            Navigate to 'example.com'

                - that exists

                    Set cookie 'foobar' to 'blah'

                        {cookie} = Get cookie 'foobar'

                            Verify cookie {
                                expect(cookie.value).to.equal('blah');
                            }

                - that doesn't exist

                    {cookie} = Get cookie 'badname'

                        - Verify above step fails #manual $s

        - Set cookie

            Navigate to 'example.com'

                Set cookie 'foobar' to 'blah'

                    {cookie} = Get cookie 'foobar'

                        Verify cookie {
                            expect(cookie.value).to.equal('blah');
                        }

        - Set cookie with expiry

            Navigate to 'example.com'

                Set cookie 'name1' to 'value1', expiring in '2' secs

                    {cookie} = Get cookie 'name1'

                        Verify cookie {
                            expect(cookie.value).to.equal('value1');
                        }

        - Delete cookie

            Navigate to 'example.com'

                - Delete cookie that exists

                    Set cookie 'name1' to 'value1'

                        Delete cookie 'name1'

                            Verify cookie 'name1' was deleted

                - Delete cookie that exists

                    Delete cookie 'name1'

                        Verify cookie 'name1' was deleted

        - Delete all cookies

            Navigate to 'example.com'
                Set test cookies
                    Delete all cookies
                        Verify test cookies were deleted

        - Clear local storage

            Navigate to 'example.com'
                Set test items in local storage
                    Clear local storage
                        Verify local storage was cleared

                    - Test that it doesn't clear the local storage for other domains

                        Set items in the local storage of a different domain [
                            Navigate to 'google.com'
                                Set test items in local storage
                        ]
                            Navigate back to the original domain and clear its local storage [
                                Navigate to 'example.com'
                                    Clear local storage
                                        Verify local storage was cleared
                            ]
                                Navigate to the different domain and verify it wasn't cleared [
                                    Navigate to 'google.com'
                                        Verify local storage wasn't cleared
                                ]

        - Clear cookies and local storage

            Navigate to 'example.com'
                Set test cookies
                    Set test items in local storage

                        Clear cookies and local storage

                            Verify test cookies were deleted
                                Verify local storage was cleared

        * Set test cookies [
            Set cookie 'name1' to 'value1'
                Set cookie 'name2' to 'value2'
        ]

            * Verify test cookies were deleted [
                Verify cookie 'name1' was deleted
                    Verify cookie 'name2' was deleted
            ]

        * Verify cookie {{name}} was deleted {
            let cookie = true;
            try {
                cookie = await browser.driver.manage().getCookie(name);
            }
            catch(e) {
                cookie = null;
            }

            expect(cookie).to.equal(null);
        }

        * Set test items in local storage {
            await executeScript(function() {
                localStorage.setItem('name1', 'value1');
                localStorage.setItem('name2', 'value2');
            });

            expect(await executeScript(function() {
                return localStorage.getItem('name1');
            })).to.equal('value1');
        }

            * Verify local storage was cleared {
                expect(await executeScript(function() {
                    return localStorage.getItem('name1');
                })).to.equal(null);

                expect(await executeScript(function() {
                    return localStorage.getItem('name2');
                })).to.equal(null);
            }

            * Verify local storage wasn't cleared {
                expect(await executeScript(function() {
                    return localStorage.getItem('name1');
                })).to.equal('value1');

                expect(await executeScript(function() {
                    return localStorage.getItem('name2');
                })).to.equal('value2');
            }

        - Go back

            Navigate to 'example.com'
                Navigate to 'google.com'
                    Go back
                        Verify at page 'example.com'

        - Go Forward

            - when there's a page in front

                Navigate to 'example.com'
                    Navigate to 'google.com'
                        Go back
                            Go forward
                                Verify at page 'google.com'

            - when there's no page in front

                Navigate to 'example.com'
                    Go forward
                        Verify at page 'example.com'

        - Refresh

            Edit the page {
                await setPageBody(`<div>Something else</div>`);
            }

                Refresh

                    Verify the edits are no longer there + [
                        Verify ['Something else'] is not visible
                    ]

        - Type

            Generate page for testing a textbox

                - a normal string of chars into a textbox

                    Type 'foobar' into [#textbox]
                        Verify 'foobar' is typed in

                - a normal string of chars into a textbox - with an API using no target element

                    Click [#textbox]
                        Type 'foobar'
                            Verify 'foobar' is typed in

                - '[none]'

                    Type '[none]' into [#textbox]
                        Verify nothing is typed in

                    Type 'foobar' into [#textbox]
                        Type '[none]' into [#textbox]
                            Verify 'foobar' is typed in

                - a string containing [special keys]

                    - [enter]

                        Type 'foobar[enter]' into [#textbox]
                            Verify 'foobar' is typed in
                                Verify form was submitted

                        - and make sure it's case insensitive

                            Type 'foobar[EnTeR]something' into [#textbox]
                                Verify 'foobarsomething' is typed in
                                    Verify form was submitted

                    - that's an invalid key

                        Type 'foobar[badkey]' into [#textbox]
                            - Validate an error is thrown $s #manual

                    - that's '[]', which won't be treated as a special key

                        Type 'foobar[]' into [#textbox]
                            Verify 'foobar[]' is typed in

                - typing in actual brackets

                    - [key]

                        Type 'foobar[' into [#textbox]
                            Type 'enter]' into [#textbox]
                                Verify 'foobar[enter]' is typed in

        * Generate page for testing a textbox {
            await setPageBody(`
                <form onsubmit="document.getElementById('display').innerHTML = 'Submitted'; return false;">
                    <input type="text" id="textbox">
                </form>
                <div id="display"></div>
            `);
        }

            * Verify {{text}} is typed in {
                await $(`#textbox, value '${str(text)}'`);
            }

            * Verify nothing is typed in {
                await $(`#textbox, value ''`);
            }

            * Verify form was submitted {
                await $(`#display, contains 'Submitted'`);
            }

        - Clear

            Generate page for testing a textbox
                Type 'foobar' into [#textbox]
                    Clear [#textbox]
                        Verify nothing is typed in

        - Set
            - sets a value

                Generate page for testing a textbox
                    Set [#textbox] to 'foobar'
                        Verify 'foobar' is typed in

            - does nothing if value is '[none]'

                Generate page for testing a textbox
                    Set [#textbox] to '[none]'
                        Verify nothing is typed in
                    Set [#textbox] to 'blah'
                        Set [#textbox] to '[none]'
                            Verify 'blah' is typed in

        * Generate page for testing a checkbox [
            * where the checkbox is checked {
                await setPageBody(`
                    <input type="checkbox" id="checkbox" checked>
                `);
            }

                * and refuses to get unchecked when clicked {
                    await setPageBody(`
                        <input type="checkbox" id="checkbox" onclick="return false;" checked>
                    `);
                }

                * and is disabled {
                    await setPageBody(`
                        <input type="checkbox" id="checkbox" disabled checked>
                    `);
                }

            * where the checkbox is unchecked {
                await setPageBody(`
                    <input type="checkbox" id="checkbox">
                `);
            }

                * and refuses to get checked when clicked {
                    await setPageBody(`
                        <input type="checkbox" id="checkbox" onclick="return false;">
                    `);
                }

                * and is disabled {
                    await setPageBody(`
                        <input type="checkbox" id="checkbox" disabled>
                    `);
                }

            * Verify the checkbox is checked {
                await $(`#checkbox, checked`);
            }

            * Verify the checkbox is unchecked {
                await $(`#checkbox, unchecked`);
            }
        ]

        * Generate page for testing a radio button [
            * where the radio button is checked {
                await setPageBody(`
                    <input type="radio" id="radio" name="radio" value="radio1" checked>
                    <input type="radio" name="radio" value="radio2">
                `);
            }

            * where the radio button is unchecked {
                await setPageBody(`
                    <input type="radio" id="radio" name="radio" value="radio1">
                    <input type="radio" name="radio" value="radio2" checked>
                `);
            }

                * and refuses to get checked when clicked {
                    await setPageBody(`
                        <input type="radio" id="radio" name="radio" value="radio1" onclick="return false;">
                        <input type="radio" name="radio" value="radio2" checked>
                    `);
                }

                * and is disabled {
                    await setPageBody(`
                        <input type="radio" id="radio" name="radio" value="radio1" disabled>
                        <input type="radio" name="radio" value="radio2" checked>
                    `);
                }

            * Verify the radio button is checked {
                await $(`#radio, checked`);
            }

            * Verify the radio button is unchecked {
                await $(`#radio, unchecked`);
            }
        ]

        - Check

            - a checkbox
                Generate page for testing a checkbox

                    where the checkbox is unchecked

                        Check [#checkbox]
                            Verify the checkbox is checked

                        and refuses to get checked when clicked
                        and is disabled

                            Check [#checkbox]
                                - Verify an error is thrown $s #manual

                    where the checkbox is checked

                        Check [#checkbox]
                            Verify the checkbox is checked

            - a radio button
                Generate page for testing a radio button

                    where the radio button is unchecked

                        Check [#radio]
                            Verify the radio button is checked

                        and refuses to get checked when clicked
                        and is disabled

                            Check [#radio]
                                - Verify an error is thrown $s #manual

                    where the radio button is checked

                        Check [#radio]
                            Verify the radio button is checked

        - Uncheck

            - a checkbox
                Generate page for testing a checkbox

                    where the checkbox is checked

                        Uncheck [#checkbox]
                            Verify the checkbox is unchecked

                        and refuses to get unchecked when clicked
                        and is disabled

                            Uncheck [#checkbox]
                                - Verify an error is thrown $s #manual

                    where the checkbox is unchecked

                        Uncheck [#checkbox]
                            Verify the checkbox is unchecked

        - Select

            Generate page {
                await setPageBody(`
                    <select>
                        <option value="one">One</option>
                        <option value="two">Two</option>
                        <option value="three">Three</option>
                        <option value="three-too">Three</option>
                    </select>
                `);
            }

                - where the value being matched
                    - exactly matches the item in the dropdown

                        - and only one item matches

                            Select 'Three' from [select]

                                Verify that the correct item is selected {
                                    await $(`select, 'Three'`);
                                }
                                    - Verify that the correct log items are present in the report #manual

                        - and multiple items match

                            Select 'Three' from [select]

                                Verify that the correct item is selected {
                                    let dropdown = await $(`select, 'Three'`);
                                    let value = await executeScript(function(dropdown) {
                                        return dropdown.options[dropdown.selectedIndex].value;
                                    }, dropdown);
                                    expect(value).to.equal('three');
                                }
                                    - Verify that the correct log items are present in the report #manual

                    - doesn't exactly match the item in the dropdown, but matches in a contains/trimmed/case-insensitive search

                        - and only one item matches

                            Select 'WO' from [select]

                                Verify that the correct item is selected {
                                    await $(`select, 'Two'`);
                                }
                                    - Verify that the correct log items are present in the report #manual

                        - and multiple items match

                            Select 'ee' from [select]

                                Verify that the correct item is selected {
                                    let dropdown = await $(`select, 'Three'`);
                                    let value = await executeScript(function(dropdown) {
                                        return dropdown.options[dropdown.selectedIndex].value;
                                    }, dropdown);
                                    expect(value).to.equal('three');
                                }
                                    - Verify that the correct log items are present in the report #manual

                - where the value is '[none]'

                    Select '[none]' from [select]

                        Verify nothing happened {
                            await $(`select, 'One'`);
                        }

        - Select element

            Generate page {
                await setPageBody(`
                    <select>
                        <option value="one">One</option>
                        <option value="two">Two</option>
                        <option value="three">Three</option>
                        <option value="three-too">Three</option>
                    </select>
                `);
            }

                - where only one item matches

                    Select element [option\[value='three'\], any visibility] from [select]

                        Verify that the correct item is selected {
                            await $(`select, 'Three'`);
                        }
                            - Verify that the correct log items are present in the report #manual

                - where multiple items match

                    Select element [option, any visibility] from [select]

                        Verify that the correct item is selected {
                            await $(`select, 'One'`);
                        }
                            - Verify that the correct log items are present in the report #manual

                - where the value is '[none]'

                    Select element '[none]' from [select]

                        Verify nothing happened {
                            await $(`select, 'One'`);
                        }

        - Current url

            - when the browser is at

                - a normal url

                    Navigate to 'example.com'
                        {url} = current url
                            Verify {
                                expect(url).to.equal('http://example.com/');
                            }

                - a newly opened blank tab

                    Open new tab
                        {url} = current url
                            Verify {
                                expect(url).to.equal('about:blank');
                            }

        - Window title

            {title} is window title

                Verify {
                    expect(title).to.equal('Window title here');
                }

        - Value of

            - an element with a value

                Generate page {
                    await setPageBody(`
                        <input type="text" id="one" value="foo">
                    `);
                }

                    {value} = value of [#one]

                        Verify value {
                            expect(value).to.equal('foo');
                        }

            - an element without a value

                Generate page {
                    await setPageBody(`
                        <div id="one">foobar</div>
                    `);
                }

                    {value} = value of [#one]

                        Verify value {
                            expect(value).to.equal(null);
                        }

    - Category: Window

        - Set dimensions

            Set dimensions to width='200' height='100'

                - Verify #manual

        - Maximize window

            Maximize window

                - Verify #manual

        - Open new tab

            Open new tab

                - Verify #manual

        - Switch to window whose title contains

            Open new tab
                Navigate to 'google.com'

                    - and a window with that title

                        - exists

                            Switch to window whose title contains 'here'
                                {title} is window title
                                    Verify {
                                        expect(title).to.equal('Window title here');
                                    }

                        - doesn't exist

                            Switch to window whose title contains 'foobar'
                                - Verify error $s #manual

        - Switch to window whose url contains

            Open new tab
                Navigate to 'google.com'
                    Open new tab
                        Navigate to 'example.com'

                            - and a window with that url

                                - exists

                                    Switch to window whose url contains 'google'
                                        {url} is current url
                                            Verify {
                                                expect(url).to.contain('www.google.com');
                                            }

                                - doesn't exist

                                    Switch to window whose url contains 'foobar'
                                        - Verify error $s #manual

        - Switch to the nth window

            Open new tab
                Navigate to 'google.com'
                    Open new tab
                        Navigate to 'example.com'

                            - and a window at that index

                                - exists

                                    If browser isn't safari  // safari orders windows differently

                                        Switch to the '2nd' window
                                            {url} is current url
                                                Verify {
                                                    expect(url).to.contain('www.google.com');
                                                }

                                - doesn't exist

                                    Switch to the '4th' window
                                        - Verify error $s #manual

                            - and nth is not set to a number

                                Switch to the 'foobar' window
                                    - Verify error $s #manual

                            - and nth is <= 0

                                Switch to the '0th' window
                                    - Verify error $s #manual

        - Switch to iframe

            Generate page {
                await setPageBody(`
                    <iframe id="frame" src="http://example.com"></iframe>
                    <div>foobar</div>
                `);
            }

                Switch to iframe [#frame]
                    Verify ['Example Domain'] is visible
                        Verify ['foobar'] is not visible

        - Switch to topmost iframe

            Generate page {
                await setPageBody(`
                    <iframe id="frame" src="http://example.com"></iframe>
                    <div>foobar</div>
                `);
            }

                Switch to iframe [#frame]
                    Switch to topmost iframe
                        Verify ['Example Domain'] is not visible
                            Verify ['foobar'] is visible

    - Category: Alerts

        * Create alert {
            await executeScript(function() {
                alert("foobar");
            });
        }

        * Create confirm {
            await executeScript(function() {
                confirm("foobar");
            });
        }

        * Create prompt {
            await executeScript(function() {
                prompt("foobar");
            });
        }

        If browser isn't safari // Safari driver throws exceptions when alerts are open

            - Accept alert

                Create alert
                Create confirm
                Create prompt

                    Accept alert

                        - Verify alert closed #manual

            - Dismiss alert

                Create alert
                Create confirm
                Create prompt

                    Dismiss alert

                        - Verify alert closed #manual

            - Verify alert contains

                Create alert
                Create confirm
                Create prompt

                    Verify alert contains 'foo'

    - Category: Network conditions and throttling $s #manual

        [
            Set network conditions to offline='true' latency='10' max-download-speed='10' max-upload-speed='10'
                Navigate to 'google.com'

            Set network conditions to offline='false' latency='1' max-download-speed='1000' max-upload-speed='1000'
                Navigate to 'google.com'
        ]
            .. [
                - If Chrome
                    - Verify throughput
                - If not Chrome
                    - Verify nothing happens and proper logs made in report
            ]

    - Category: Mocks !

        * Verify page time is set to {{time}} [
            Update page with element containing time
                Verify time {
                    await $(`#date, '${str(time)}'`);
                }
        ]

        * Verify page time is not set to {{time}} [
            Update page with element containing time
                Verify time {
                    await not$(`#date, '${str(time)}'`);
                }
        ]

        * Update page with element containing time {
            await executeScript(function() {
                document.body.innerHTML = `<div id="date"></div>`;
                let s = document.createElement("script");
                s.type = "text/javascript";
                s.innerHTML = `document.getElementById('date').innerHTML = (new Date()).toString();`
                document.body.append(s);
            });
        }

        * Verify location is latitude={{lat}} longitude={{long}} {
            await browser.driver.manage().setTimeouts( { script: 40 * 1000 } );

            let position = await executeAsyncScript(function(done) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    done(position);
                });
            });

            Comparer.expect(position).to.match({
                coords: {
                    latitude: parseFloat(lat), longitude: parseFloat(long)
                }
            });
        }

        * Verify location is not latitude={{lat}} longitude={{long}} {
            await browser.driver.manage().setTimeouts( { script: 40 * 1000 } );

            let position = await executeAsyncScript(function(done) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    done(position);
                });
            });

            expect(position.coords.latitide).to.not.equal(parseFloat(lat));
            expect(position.coords.longitude).to.not.equal(parseFloat(long));
        }

        - Mock time

            [
                with valid Date object [
                    Set {time} {
                        g('time', new Date("1/2/2011 3:45 pm"))
                    }
                        Mock time to {time}
                ]

                with valid Date string [
                    Mock time to "1/2/2011 3:45 pm"
                ]
            ]

                Verify page time is set to 'Sun Jan 02 2011 15:45'

            - with invalid Date string

                Mock time to "badstr"
                    Verify page time is set to 'Invalid date'

        - Location mocking

            - Mock location to latitude and longitude

                Mock location to latitude='10.5' longitude='20'
                    Verify location is latitude='10.5' longitude='20'

            - Mock location to location

                - with valid city name

                    Mock location to 'Tokyo'
                        Verify location is latitude='35.689487' longitude='139.691706'

                - with invalid city name

                    Mock location to 'badcity'
                        - Verify error $s #manual

        - Stop all mocks

            Mock time to "1/2/2011 3:45 pm"
                Mock location to latitude='10.5' longitude='20'

                    Stop all mocks

                        Verify page time is not set to 'Sun Jan 02 2011 15:45'
                            Verify location is not latitude='10.5' longitude='20' -s #manual // manual because browser sometimes doesn't allow reading the location, needs permission, or takes forever to do so

    - Category: Verify

        - Verify at page

            - and the title contains the given text

                Verify at page 'title here'

            - and the url contains the given text

                Verify at page 'generic-page'

            - and neither the title nor the url contain the given text

                Verify at page 'badstr'
                    - Verify error $s #manual

        - Verify at page (with regex)

            - and the title matches the given regex

                Verify at page 'title .*'

            - and the url matches the given regex

                Verify at page 'generic-.*'
                Verify at page '^.*generic-.*$'

            - and neither the title not the url matches

                Verify at page 'aaa.*'
                    - Verify error $s #manual

                - Bad regex
                    Verify at page '(()'
                        - Verify error $s #manual

        - Verify cookie contains

            - where the cookie with the given name

                - doesn't exist

                    Verify cookie 'badname' contains 'badvalue'
                        - Verify error $s #manual

                - exists

                    Navigate to 'example.com'
                        Set cookie 'foo' to 'onetwothree'

                            - and contains the given value

                                Verify cookie 'foo' contains 'two'

                            - and doesn't contain the given value

                                Verify cookie 'foo' contains 'badstr'
                                    - Verify error $s #manual

        - Verify element is visible

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Verify [#one] is visible

                - and element is not visible

                    Verify [#badid] is visible
                        - Verify error $s #manual

        - Verify element is not visible

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is not visible

                    Verify [#badid] is not visible

                - and element is visible

                    Verify [#one] is not visible
                        - Verify error $s #manual

        - Verify element is state

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Verify [#one] is ['foobar']

                - and element is not visible

                    Verify [#one] is ['badtext']
                        - Verify error $s #manual

        - Verify every element is state

            Generate page {
                await setPageBody(`
                    <div class="one">one two</div>
                    <div class="one">one three</div>
                `);
            }

                - and element really is visible

                    Verify every [.one] is ['one']

                - and element is not visible

                    Verify every [.one] is ['two']
                        - Verify error $s #manual

    - Category: Wait until

        - Wait until at page

            - and the title contains the given text

                Wait until at page 'title here'

            - and the url contains the given text

                Wait until at page 'generic-page'

            - and neither the title nor the url contain the given text

                Wait until at page 'badstr'
                    - Verify error $s #manual

        - Wait until at page (with regex)

            - and the title contains the given text

                Wait until at page '.* title .*'

            - and the url contains the given text

                Wait until at page '.*generic-.*'

            - and neither the title nor the url contain the given text

                Wait until at page 'ddd.*'
                    - Verify error $s #manual

        - Wait until at page (up to n secs)

            - and the title contains the given text

                Wait until at page 'title here' (up to '5' secs)

            - and the url contains the given text

                Wait until at page 'generic-page' (up to '5' secs)

            - and neither the title nor the url contain the given text

                Wait until at page 'badstr' (up to '5' secs)
                    - Verify error $s #manual

        - Wait until at page (up to n secs) (with regex)

            - and the title contains the given text

                Wait until at page '.*title .*' (up to '5' secs)

            - and the url contains the given text

                Wait until at page '.*generic-.*' (up to '5' secs)

            - and neither the title nor the url contain the given text

                Wait until at page 'ddd.*' (up to '5' secs)
                    - Verify error $s #manual

        - Wait until cookie contains

            - where the cookie with the given name

                - doesn't exist

                    Wait until cookie 'badname' contains 'badvalue'
                        - Verify error $s #manual

                - exists

                    Navigate to 'example.com'
                        Set cookie 'foo' to 'onetwothree'

                            - and contains the given value

                                Wait until cookie 'foo' contains 'two'

                            - and doesn't contain the given value

                                Wait until cookie 'foo' contains 'badstr'
                                    - Verify error $s #manual

        - Wait until cookie contains (up to n secs)

            - where the cookie with the given name

                - doesn't exist

                    Wait until cookie 'badname' contains 'badvalue' (up to '5' secs)
                        - Verify error $s #manual

                - exists

                    Navigate to 'example.com'
                        Set cookie 'foo' to 'onetwothree'

                            - and contains the given value

                                Wait until cookie 'foo' contains 'two' (up to '5' secs)

                            - and doesn't contain the given value

                                Wait until cookie 'foo' contains 'badstr' (up to '5' secs)
                                    - Verify error $s #manual

        - Wait until element is visible

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Wait until [#one] is visible

                - and element is not visible

                    Wait until [#badid] is visible
                        - Verify error $s #manual

        - Wait until element is visible (up to n secs)

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Wait until [#one] is visible (up to '5' secs)

                - and element is not visible

                    Wait until [#badid] is visible (up to '5' secs)
                        - Verify error $s #manual

        - Wait until element is not visible

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is not visible

                    Wait until [#badid] is not visible

                - and element is visible

                    Wait until [#one] is not visible
                        - Verify error $s #manual

        - Wait until element is not visible (up to n secs)

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is not visible

                    Wait until [#badid] is not visible (up to '5' secs)

                - and element is visible

                    Wait until [#one] is not visible (up to '5' secs)
                        - Verify error $s #manual

        - Wait until element is state

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Wait until [#one] is ['foobar']

                - and element is not visible

                    Wait until [#one] is ['badtext']
                        - Verify error $s #manual

        - Wait until every element is state

            Generate page {
                await setPageBody(`
                    <div class="one">one two</div>
                    <div class="one">one three</div>
                `);
            }

                - and element really is visible

                    Wait until every [.one] is ['one']

                - and element is not visible

                    Wait until every [.one] is ['two']
                        - Verify error $s #manual

        - Wait until element is state (up to n secs)

            Generate page {
                await setPageBody(`
                    <div id="one">foobar</div>
                `);
            }

                - and element really is visible

                    Wait until [#one] is ['foobar'] (up to '5' secs)

                - and element is not visible

                    Wait until [#one] is ['badtext'] (up to '5' secs)
                        - Verify error $s #manual

        - Wait until every element is state (up to n secs)

            Generate page {
                await setPageBody(`
                    <div class="one">one two</div>
                    <div class="one">one three</div>
                `);
            }

                - and element really is visible

                    Wait until every [.one] is ['one'] (up to '5' secs)

                - and element is not visible

                    Wait until every [.one] is ['two'] (up to '5' secs)
                        - Verify error $s #manual

    - Category: Wait

        Wait '1' second
        Wait '5' seconds

            - Verify time elapsed in console output $s #manual

    - Category: Print and Log

        - Log

            - A plain string

                Log 'hello world'
                    - Verify in report $s #manual

            - With vars in string

                {foo} = 'world'
                    Log 'hello {foo}'
                        - Verify in report $s #manual

        - [EF]

            Generate page {
                await setPageBody(`
                    <button id="target" onclick="document.getElementById('display').innerHTML = 'I was clicked'">click me</button>
                    <div id="display">foobar</div>
                `);

                props({
                    'target button': `#target`
                });
            }

                - Element exists

                    [div]
                    [#display]
                    [target button]
                    [element]

                - Element doesn't exist

                    [#baditem]

                        - Verify error $s #manual

    * If browser isn't safari +? {
        if(browser.params.name === 'safari') {
            log(`Since browser is safari, all further steps will be skipped and the branch will be passed`);
            runInstance.currBranch.markBranch('pass');
        }
    }
